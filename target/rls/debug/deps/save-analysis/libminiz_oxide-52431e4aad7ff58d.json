{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2","program":"/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","miniz_oxide","--edition=2018","/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"with-alloc\"","-C","metadata=52431e4aad7ff58d","-C","extra-filename=-52431e4aad7ff58d","--out-dir","/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","-L","dependency=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","--extern","adler=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libadler-59f60143c39b3c1b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libminiz_oxide-52431e4aad7ff58d.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[12283632608972530391,0]},"crate_root":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src","external_crates":[{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[15846600599516386926,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3248197779922953368,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16106073209810206859,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[705058097557950442,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/shared.rs","num":5,"id":{"name":"adler","disambiguator":[10347596396297131500,0]}}],"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":0,"byte_end":6335,"line_start":1,"line_end":210,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":670},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":990,"byte_end":1004,"line_start":35,"line_end":35,"column_start":24,"column_end":38},"alias_span":null,"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1050,"byte_end":1065,"line_start":36,"line_end":36,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1067,"byte_end":1089,"line_start":36,"line_end":36,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":0,"byte_end":6335,"line_start":1,"line_end":210,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":393},{"krate":0,"index":665},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":678},{"krate":0,"index":989},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":681},{"krate":0,"index":1022},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":1103},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"/ A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ DEFLATE/zlib encoder/decoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":81,"byte_end":114,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/ The plan for this crate is to be used as a back-end for the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":115,"byte_end":178,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"/ [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":179,"byte_end":266,"line_start":4,"line_end":4,"column_start":1,"column_end":88}},{"value":"/ need to depend on a C library.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":267,"byte_end":301,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":302,"byte_end":305,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":306,"byte_end":317,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ## Simple compression/decompression:","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":318,"byte_end":358,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/ ``` rust","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":359,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":372,"byte_end":375,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ use miniz_oxide::inflate::decompress_to_vec;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":376,"byte_end":424,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use miniz_oxide::deflate::compress_to_vec;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":425,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ fn roundtrip(data: &[u8]) {","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":476,"byte_end":507,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/     let compressed = compress_to_vec(data, 6);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":508,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/     let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":559,"byte_end":659,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ #   let _ = decompressed;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":660,"byte_end":689,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":690,"byte_end":695,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":696,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # roundtrip(b\"Test_data test data lalalal blabla\");","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":700,"byte_end":755,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":756,"byte_end":759,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":760,"byte_end":767,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":769,"byte_end":792,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":827,"byte_end":833,"line_start":25,"line_end":25,"column_start":35,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":47},{"krate":0,"index":361},{"krate":0,"index":389},{"krate":0,"index":797},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":889,"byte_end":919,"line_start":30,"line_end":30,"column_start":1,"column_end":31}},{"value":"/ This module contains functionality for compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6337,"byte_end":6392,"line_start":1,"line_end":1,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":113},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":115},{"krate":0,"index":713},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":770},{"krate":0,"index":783},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":204},{"krate":0,"index":210},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":265},{"krate":0,"index":286},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":306},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":336},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming compression functionality.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":15015,"byte_end":15055,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":115},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":23877,"byte_end":23890,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":23946,"byte_end":23969,"line_start":170,"line_end":170,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Whether to use a zlib wrapper.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":23897,"byte_end":23931,"line_start":169,"line_end":169,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24052,"byte_end":24073,"line_start":172,"line_end":172,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[{"value":"/ Should we compute the adler32 checksum.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":23994,"byte_end":24037,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24246,"byte_end":24271,"line_start":175,"line_end":175,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[{"value":"/ Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24098,"byte_end":24187,"line_start":173,"line_end":173,"column_start":5,"column_end":94}},{"value":"/ bytes to check for better matches.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24192,"byte_end":24231,"line_start":174,"line_end":174,"column_start":5,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24425,"byte_end":24460,"line_start":178,"line_end":178,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[{"value":"/ Used in miniz to skip zero-initializing hash and dict. We don't do this here, so","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24296,"byte_end":24380,"line_start":176,"line_end":176,"column_start":5,"column_end":89}},{"value":"/ this flag is ignored.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24385,"byte_end":24410,"line_start":177,"line_end":177,"column_start":5,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24547,"byte_end":24564,"line_start":180,"line_end":180,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 0.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24485,"byte_end":24532,"line_start":179,"line_end":179,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":121},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24656,"byte_end":24676,"line_start":182,"line_end":182,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 6 bytes long.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24589,"byte_end":24641,"line_start":181,"line_end":181,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24859,"byte_end":24888,"line_start":185,"line_end":185,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output static blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24701,"byte_end":24795,"line_start":183,"line_end":183,"column_start":5,"column_end":99}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24800,"byte_end":24844,"line_start":184,"line_end":184,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24992,"byte_end":25018,"line_start":187,"line_end":187,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output raw/uncompressed blocks.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":24913,"byte_end":24977,"line_start":186,"line_end":186,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":714},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25307,"byte_end":25314,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[{"value":"/ Don't use any of the special strategies.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25258,"byte_end":25302,"line_start":196,"line_end":196,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":717},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25381,"byte_end":25389,"line_start":199,"line_end":199,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 5 bytes long.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25324,"byte_end":25376,"line_start":198,"line_end":198,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":720},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25465,"byte_end":25476,"line_start":201,"line_end":201,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[{"value":"/ Don't look for matches, only huffman encode the literals.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25399,"byte_end":25460,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":723},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25571,"byte_end":25574,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 1, i.e do run-length encoding only.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25486,"byte_end":25566,"line_start":202,"line_end":202,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":726},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25711,"byte_end":25716,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Only use static/fixed blocks. (Blocks using the default huffman codes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25584,"byte_end":25657,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25662,"byte_end":25706,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":713},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25232,"byte_end":25251,"line_start":195,"line_end":195,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"enum CompressionStrategy {\n    Default = ,\n    Filtered = ,\n    HuffmanOnly = ,\n    RLE = ,\n    Fixed = ,\n}","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723},{"krate":0,"index":726}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"/ Strategy setting for compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25042,"byte_end":25079,"line_start":190,"line_end":190,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25080,"byte_end":25083,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ The non-default settings offer some special-case compression variants.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25084,"byte_end":25158,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25159,"byte_end":25171,"line_start":193,"line_end":193,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25959,"byte_end":25963,"line_start":215,"line_end":215,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Normal operation.","sig":null,"attributes":[{"value":"/ Normal operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25837,"byte_end":25858,"line_start":212,"line_end":212,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25863,"byte_end":25866,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Compress as much as there is space for, and then return waiting for more input.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25871,"byte_end":25954,"line_start":214,"line_end":214,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":747},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26047,"byte_end":26051,"line_start":218,"line_end":218,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Try to flush all the current data and output an empty raw block.\n","sig":null,"attributes":[{"value":"/ Try to flush all the current data and output an empty raw block.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25974,"byte_end":26042,"line_start":217,"line_end":217,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":750},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26194,"byte_end":26198,"line_start":222,"line_end":222,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\n depend on previous data.\n","sig":null,"attributes":[{"value":"/ Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26062,"byte_end":26156,"line_start":220,"line_end":220,"column_start":5,"column_end":99}},{"value":"/ depend on previous data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26161,"byte_end":26189,"line_start":221,"line_end":221,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":753},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26351,"byte_end":26357,"line_start":227,"line_end":227,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Try to flush everything and end the deflate stream.","sig":null,"attributes":[{"value":"/ Try to flush everything and end the deflate stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26209,"byte_end":26264,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26269,"byte_end":26272,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ On success this will yield a [`TDEFLStatus::Done`] return status.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26277,"byte_end":26346,"line_start":226,"line_end":226,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":743},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25820,"byte_end":25830,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"enum TDEFLFlush { None = , Sync = , Full = , Finish = , }","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"/ A list of deflate flush types.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":25725,"byte_end":25759,"line_start":209,"line_end":209,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26409,"byte_end":26413,"line_start":231,"line_end":231,"column_start":8,"column_end":12},"name":"from","qualname":"<TDEFLFlush as core::convert::From>::from","value":"fn from(MZFlush) -> Self","parent":{"krate":1,"index":3056},"children":[],"decl_id":{"krate":1,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26765,"byte_end":26768,"line_start":243,"line_end":243,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":771},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27353,"byte_end":27361,"line_start":262,"line_end":262,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Usage error.","sig":null,"attributes":[{"value":"/ Usage error.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27170,"byte_end":27186,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27191,"byte_end":27194,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This indicates that either the [`CompressorOxide`] experienced a previous error, or the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27199,"byte_end":27290,"line_start":260,"line_end":260,"column_start":5,"column_end":96}},{"value":"/ stream has already been [`TDEFLFlush::Finish`]'d.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27295,"byte_end":27348,"line_start":261,"line_end":261,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":774},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27479,"byte_end":27491,"line_start":267,"line_end":267,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Error putting data into output buffer.","sig":null,"attributes":[{"value":"/ Error putting data into output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27373,"byte_end":27415,"line_start":264,"line_end":264,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27420,"byte_end":27423,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This usually indicates a too-small buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27428,"byte_end":27474,"line_start":266,"line_end":266,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":777},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27543,"byte_end":27547,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Compression succeeded normally.\n","sig":null,"attributes":[{"value":"/ Compression succeeded normally.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27503,"byte_end":27538,"line_start":269,"line_end":269,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":780},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27709,"byte_end":27713,"line_start":275,"line_end":275,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Compression succeeded and the deflate stream was ended.","sig":null,"attributes":[{"value":"/ Compression succeeded and the deflate stream was ended.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27558,"byte_end":27617,"line_start":272,"line_end":272,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27622,"byte_end":27625,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This is the result of calling compression with [`TDEFLFlush::Finish`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27630,"byte_end":27704,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":770},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27152,"byte_end":27163,"line_start":257,"line_end":257,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"enum TDEFLStatus { BadParam = , PutBufFailed = , Okay = , Done = , }","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780}],"decl_id":null,"docs":" Return status of compression.\n","sig":null,"attributes":[{"value":"/ Return status of compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27045,"byte_end":27078,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":27079,"byte_end":27091,"line_start":255,"line_end":255,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32107,"byte_end":32122,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[{"value":"/ Main compression struct.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32067,"byte_end":32095,"line_start":413,"line_end":413,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32420,"byte_end":32423,"line_start":426,"line_end":426,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[{"value":"/ Create a new `CompressorOxide` with the given flags.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32247,"byte_end":32303,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32308,"byte_end":32311,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32316,"byte_end":32327,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ This function may be changed to take different parameters in the future.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32332,"byte_end":32408,"line_start":425,"line_end":425,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32835,"byte_end":32842,"line_start":438,"line_end":438,"column_start":18,"column_end":25},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"const fn adler32(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[{"value":"/ Get the adler32 checksum of the currently encoded data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32758,"byte_end":32817,"line_start":437,"line_end":437,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33023,"byte_end":33041,"line_start":444,"line_end":444,"column_start":18,"column_end":36},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"const fn prev_return_status(&Self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[{"value":"/ Get the return status of the previous [`compress`](fn.compress.html)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32898,"byte_end":32970,"line_start":442,"line_end":442,"column_start":5,"column_end":77}},{"value":"/ call with this compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32975,"byte_end":33005,"line_start":443,"line_end":443,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33286,"byte_end":33291,"line_start":452,"line_end":452,"column_start":18,"column_end":23},"name":"flags","qualname":"<CompressorOxide>::flags","value":"const fn flags(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[{"value":"/ Get the raw compressor flags.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33116,"byte_end":33149,"line_start":448,"line_end":448,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33154,"byte_end":33157,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33162,"byte_end":33173,"line_start":450,"line_end":450,"column_start":5,"column_end":16}},{"value":"/ This function may be deprecated or changed in the future to use more rust-style flags.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33178,"byte_end":33268,"line_start":451,"line_end":451,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33444,"byte_end":33455,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"fn data_format(&Self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[{"value":"/ Returns whether the compressor is wrapping the data in a zlib format or not.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33352,"byte_end":33432,"line_start":456,"line_end":456,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33765,"byte_end":33770,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[{"value":"/ Reset the state of the compressor, keeping the same parameters.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33638,"byte_end":33705,"line_start":465,"line_end":465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33710,"byte_end":33713,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This avoids re-allocating data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":33718,"byte_end":33753,"line_start":467,"line_end":467,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34307,"byte_end":34328,"line_start":482,"line_end":482,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"fn set_compression_level(&mut Self, CompressionLevel)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34057,"byte_end":34105,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34110,"byte_end":34113,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compression has started is supported.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34118,"byte_end":34192,"line_start":479,"line_end":479,"column_start":5,"column_end":79}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34197,"byte_end":34208,"line_start":480,"line_end":480,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34213,"byte_end":34295,"line_start":481,"line_end":481,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34748,"byte_end":34773,"line_start":492,"line_end":492,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"fn set_compression_level_raw(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor using an integer value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34475,"byte_end":34546,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34551,"byte_end":34554,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compression has started is supported.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34559,"byte_end":34633,"line_start":489,"line_end":489,"column_start":5,"column_end":79}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34638,"byte_end":34649,"line_start":490,"line_end":490,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34654,"byte_end":34736,"line_start":491,"line_end":491,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35365,"byte_end":35385,"line_start":506,"line_end":506,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"fn set_format_and_level(&mut Self, DataFormat, u8)","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[{"value":"/ Update the compression settings of the compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34900,"byte_end":34954,"line_start":497,"line_end":497,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34959,"byte_end":34962,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Changing the `DataFormat` after compression has started will result in","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":34967,"byte_end":35041,"line_start":499,"line_end":499,"column_start":5,"column_end":79}},{"value":"/ a corrupted stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35046,"byte_end":35069,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35074,"byte_end":35077,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35082,"byte_end":35093,"line_start":502,"line_end":502,"column_start":5,"column_end":16}},{"value":"/ This function mainly intended for setting the initial settings after e.g creating with","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35098,"byte_end":35188,"line_start":503,"line_end":503,"column_start":5,"column_end":95}},{"value":"/ `default` or after calling `CompressorOxide::reset()`, and behaviour may be changed","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35193,"byte_end":35280,"line_start":504,"line_end":504,"column_start":5,"column_end":92}},{"value":"/ to disallow calling it after starting compression in the future.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35285,"byte_end":35353,"line_start":505,"line_end":505,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35871,"byte_end":35878,"line_start":521,"line_end":521,"column_start":8,"column_end":15},"name":"default","qualname":"<CompressorOxide as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3128},"children":[],"decl_id":{"krate":1,"index":3129},"docs":" Initialize the compressor with a level of 4, zlib wrapper and\n the default strategy.\n","sig":null,"attributes":[{"value":"/ Initialize the compressor with a level of 4, zlib wrapper and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35746,"byte_end":35811,"line_start":518,"line_end":518,"column_start":5,"column_end":70}},{"value":"/ the default strategy.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35816,"byte_end":35841,"line_start":519,"line_end":519,"column_start":5,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35846,"byte_end":35863,"line_start":520,"line_end":520,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":174},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":36289,"byte_end":36301,"line_start":534,"line_end":534,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":176}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[{"value":"/ Callback function and user used in `compress_to_output`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":36217,"byte_end":36277,"line_start":533,"line_end":533,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":176},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":36316,"byte_end":36328,"line_start":535,"line_end":535,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> core::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":355},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95561,"byte_end":95569,"line_start":2211,"line_end":2211,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"fn compress(&mut CompressorOxide, &[u8], &mut [u8], TDEFLFlush)\n-> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[{"value":"/ Main compression function. Tries to compress as much as possible from `in_buf` and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94725,"byte_end":94811,"line_start":2195,"line_end":2195,"column_start":1,"column_end":87}},{"value":"/ puts compressed output into `out_buf`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94812,"byte_end":94854,"line_start":2196,"line_end":2196,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94855,"byte_end":94858,"line_start":2197,"line_end":2197,"column_start":1,"column_end":4}},{"value":"/ The value of `flush` determines if the compressor should attempt to flush all output","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94859,"byte_end":94947,"line_start":2198,"line_end":2198,"column_start":1,"column_end":89}},{"value":"/ and alternatively try to finish the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94948,"byte_end":94995,"line_start":2199,"line_end":2199,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":94996,"byte_end":94999,"line_start":2200,"line_end":2200,"column_start":1,"column_end":4}},{"value":"/ Use [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95000,"byte_end":95088,"line_start":2201,"line_end":2201,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95089,"byte_end":95092,"line_start":2202,"line_end":2202,"column_start":1,"column_end":4}},{"value":"/ Note that this function does not keep track of whether a flush marker has been output, so","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95093,"byte_end":95186,"line_start":2203,"line_end":2203,"column_start":1,"column_end":94}},{"value":"/ if called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95187,"byte_end":95284,"line_start":2204,"line_end":2204,"column_start":1,"column_end":98}},{"value":"/ output buffer if they want to avoid repeated flush markers.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95285,"byte_end":95348,"line_start":2205,"line_end":2205,"column_start":1,"column_end":64}},{"value":"/ See #105 for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95349,"byte_end":95374,"line_start":2206,"line_end":2206,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95375,"byte_end":95378,"line_start":2207,"line_end":2207,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95379,"byte_end":95392,"line_start":2208,"line_end":2208,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95393,"byte_end":95482,"line_start":2209,"line_end":2209,"column_start":1,"column_end":90}},{"value":"/ in the input buffer and the current position in the output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95483,"byte_end":95553,"line_start":2210,"line_end":2210,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":96121,"byte_end":96139,"line_start":2232,"line_end":2232,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"fn compress_to_output<impl FnMut(&[u8]) -> bool>(&mut CompressorOxide, &[u8],\nTDEFLFlush, impl FnMut(&[u8]) -> bool) -> (TDEFLStatus, usize) where\nimpl FnMut(&[u8]) -> bool: FnMut(&[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[{"value":"/ Main compression function. Callbacks output.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95819,"byte_end":95867,"line_start":2224,"line_end":2224,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95868,"byte_end":95871,"line_start":2225,"line_end":2225,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95872,"byte_end":95885,"line_start":2226,"line_end":2226,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95886,"byte_end":95975,"line_start":2227,"line_end":2227,"column_start":1,"column_end":90}},{"value":"/ in the input buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":95976,"byte_end":96000,"line_start":2228,"line_end":2228,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":96001,"byte_end":96004,"line_start":2229,"line_end":2229,"column_start":1,"column_end":4}},{"value":"/ The caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":96005,"byte_end":96098,"line_start":2230,"line_end":2230,"column_start":1,"column_end":94}},{"value":"/ behaviour.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":96099,"byte_end":96113,"line_start":2231,"line_end":2231,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":360},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":100108,"byte_end":100141,"line_start":2351,"line_end":2351,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"fn create_comp_flags_from_zip_params(i32, i32, i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intended for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[{"value":"/ Create a set of compression flags using parameters used by zlib and other compressors.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99459,"byte_end":99549,"line_start":2339,"line_end":2339,"column_start":1,"column_end":91}},{"value":"/ Mainly intended for use with transition from c libraries as it deals with raw integers.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99550,"byte_end":99641,"line_start":2340,"line_end":2340,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99642,"byte_end":99645,"line_start":2341,"line_end":2341,"column_start":1,"column_end":4}},{"value":"/ # Parameters","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99646,"byte_end":99662,"line_start":2342,"line_end":2342,"column_start":1,"column_end":17}},{"value":"/ `level` determines compression level. Clamped to maximum of 10. Negative values result in","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99663,"byte_end":99756,"line_start":2343,"line_end":2343,"column_start":1,"column_end":94}},{"value":"/ `CompressionLevel::DefaultLevel`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99757,"byte_end":99794,"line_start":2344,"line_end":2344,"column_start":1,"column_end":38}},{"value":"/ `window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99795,"byte_end":99890,"line_start":2345,"line_end":2345,"column_start":1,"column_end":96}},{"value":"/ stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99891,"byte_end":99902,"line_start":2346,"line_end":2346,"column_start":1,"column_end":12}},{"value":"/ `strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":99903,"byte_end":100000,"line_start":2347,"line_end":2347,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":100001,"byte_end":100004,"line_start":2348,"line_end":2348,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":100005,"byte_end":100016,"line_start":2349,"line_end":2349,"column_start":1,"column_end":12}},{"value":"/ This function may be removed or moved to the `miniz_oxide_c_api` in the future.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":100017,"byte_end":100100,"line_start":2350,"line_end":2350,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":361},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming compression functionality.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103613,"byte_end":103659,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103660,"byte_end":103663,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly intended for use to build a higher-level wrapper.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103664,"byte_end":103742,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103743,"byte_end":103746,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ There is no DeflateState as the needed state is contained in the compressor struct itself.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103747,"byte_end":103841,"line_start":5,"line_end":5,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":388},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104529,"byte_end":104536,"line_start":22,"line_end":22,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"fn deflate(&mut CompressorOxide, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given [`CompressorOxide`].","sig":null,"attributes":[{"value":"/ Try to compress from input to output with the given [`CompressorOxide`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":103979,"byte_end":104055,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104056,"byte_end":104059,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104060,"byte_end":104072,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104073,"byte_end":104076,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104077,"byte_end":104176,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ to lack of expected input data, or if called without [`MZFlush::Finish`] after the compression","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104177,"byte_end":104275,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ was already finished.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104276,"byte_end":104301,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104302,"byte_end":104305,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Param`] if the compressor parameters are set wrong.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104306,"byte_end":104380,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104381,"byte_end":104384,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Stream`] when lower-level decompressor returns a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104385,"byte_end":104456,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ [`TDEFLStatus::PutBufFailed`]; may not actually be possible.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/stream.rs","byte_start":104457,"byte_end":104521,"line_start":21,"line_end":21,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6927,"byte_end":6940,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Don't do any compression, only output uncompressed blocks.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6860,"byte_end":6922,"line_start":17,"line_end":17,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7040,"byte_end":7049,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[{"value":"/ Fast compression. Uses a special compression routine that is optimized for speed.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6950,"byte_end":7035,"line_start":19,"line_end":19,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7138,"byte_end":7153,"line_start":22,"line_end":22,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[{"value":"/ Slow/high compression. Do a lot of checks to try to find good matches.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7059,"byte_end":7133,"line_start":21,"line_end":21,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7207,"byte_end":7222,"line_start":24,"line_end":24,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[{"value":"/ Even more checks, can be very slow.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7163,"byte_end":7202,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":810},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7291,"byte_end":7303,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[{"value":"/ Default compromise between speed and compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7233,"byte_end":7286,"line_start":25,"line_end":25,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":813},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7356,"byte_end":7374,"line_start":28,"line_end":28,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":797},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[{"value":"/ Use the default compression level.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":7313,"byte_end":7351,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":797},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6837,"byte_end":6853,"line_start":16,"line_end":16,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"enum CompressionLevel {\n    NoCompression = ,\n    BestSpeed = ,\n    BestCompression = ,\n    UberCompression = ,\n    DefaultLevel = ,\n    DefaultCompression = ,\n}","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"/ How much processing the compressor should do to compress the data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6508,"byte_end":6578,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6579,"byte_end":6675,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ of checks for matches in the hash chains and whether to use lazy or greedy parsing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6676,"byte_end":6763,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6764,"byte_end":6776,"line_start":14,"line_end":14,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":390},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":9469,"byte_end":9484,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"fn compress_to_vec(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":9375,"byte_end":9461,"line_start":109,"line_end":109,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":9695,"byte_end":9715,"line_start":116,"line_end":116,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"fn compress_to_vec_zlib(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10), and with a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":9572,"byte_end":9669,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"/ zlib wrapper.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":9670,"byte_end":9687,"line_start":115,"line_end":115,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":539},{"krate":0,"index":554},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":948},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":649},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[{"value":"/ This module contains functionality for decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":107639,"byte_end":107696,"line_start":1,"line_end":1,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":407},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":426},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":437},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":486},{"krate":0,"index":491},{"krate":0,"index":830},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":921},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming decompression functionality.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":121675,"byte_end":121717,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":429},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":121900,"byte_end":121918,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":455},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125649,"byte_end":125662,"line_start":108,"line_end":108,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"decl_id":null,"docs":" Flags to [`decompress()`] to control how inflation works.","sig":null,"attributes":[{"value":"/ Flags to [`decompress()`] to control how inflation works.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125529,"byte_end":125590,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125591,"byte_end":125594,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ These define bits for a bitmask argument.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125595,"byte_end":125640,"line_start":107,"line_end":107,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":456},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125885,"byte_end":125913,"line_start":113,"line_end":113,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?","sig":null,"attributes":[{"value":"/ Should we try to parse a zlib header?","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125669,"byte_end":125710,"line_start":109,"line_end":109,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125715,"byte_end":125718,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If unset, the function will expect an RFC1951 deflate stream.  If set, it will expect a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125723,"byte_end":125814,"line_start":111,"line_end":111,"column_start":5,"column_end":96}},{"value":"/ RFC1950 zlib wrapper around the deflate stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125819,"byte_end":125870,"line_start":112,"line_end":112,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":457},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126737,"byte_end":126762,"line_start":125,"line_end":125,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There will be more input that hasn't been given to the decompressor yet.","sig":null,"attributes":[{"value":"/ There will be more input that hasn't been given to the decompressor yet.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":125929,"byte_end":126005,"line_start":115,"line_end":115,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126010,"byte_end":126013,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to decompress what you have so far,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126018,"byte_end":126086,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ even if you know there is probably more input that hasn't gotten here yet (_e.g._, over a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126091,"byte_end":126184,"line_start":118,"line_end":118,"column_start":5,"column_end":98}},{"value":"/ network connection).  When [`decompress()`][super::decompress] reaches the end of the input","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126189,"byte_end":126284,"line_start":119,"line_end":119,"column_start":5,"column_end":100}},{"value":"/ without finding the end of the compressed stream, it will return","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126289,"byte_end":126357,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ [`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126362,"byte_end":126449,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ indicating that you should get more data before calling again.  If not set, it will return","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126454,"byte_end":126548,"line_start":122,"line_end":122,"column_start":5,"column_end":99}},{"value":"/ [`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126553,"byte_end":126644,"line_start":123,"line_end":123,"column_start":5,"column_end":96}},{"value":"/ suggesting the stream is corrupt, since you claimed it was all there.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126649,"byte_end":126722,"line_start":124,"line_end":124,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126838,"byte_end":126878,"line_start":128,"line_end":128,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[{"value":"/ The output buffer should not wrap around.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126778,"byte_end":126823,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127210,"byte_end":127236,"line_start":136,"line_end":136,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.","sig":null,"attributes":[{"value":"/ Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126894,"byte_end":126990,"line_start":130,"line_end":130,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":126995,"byte_end":126998,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ If [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127003,"byte_end":127076,"line_start":132,"line_end":132,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127081,"byte_end":127084,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ NOTE: Enabling/disabling this between calls to decompress will result in an incorect","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127089,"byte_end":127177,"line_start":134,"line_end":134,"column_start":5,"column_end":93}},{"value":"/ checksum.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127182,"byte_end":127195,"line_start":135,"line_end":135,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127774,"byte_end":127799,"line_start":148,"line_end":148,"column_start":15,"column_end":40},"name":"TINFL_FLAG_IGNORE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_IGNORE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Ignore adler32 checksum even if we are inflating a zlib stream.","sig":null,"attributes":[{"value":"/ Ignore adler32 checksum even if we are inflating a zlib stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127252,"byte_end":127319,"line_start":138,"line_end":138,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127324,"byte_end":127327,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Overrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127332,"byte_end":127397,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127402,"byte_end":127405,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ NOTE: This flag does not exist in miniz as it does not support this and is a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127410,"byte_end":127490,"line_start":142,"line_end":142,"column_start":5,"column_end":85}},{"value":"/ custom addition for miniz_oxide.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127495,"byte_end":127531,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127536,"byte_end":127539,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ NOTE: Should not be changed from enabled to disabled after decompression has started,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127544,"byte_end":127633,"line_start":145,"line_end":145,"column_start":5,"column_end":94}},{"value":"/ this will result in checksum failure (outside the unlikely event where the checksum happens","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127638,"byte_end":127733,"line_start":146,"line_end":146,"column_start":5,"column_end":100}},{"value":"/ to match anyway).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":127738,"byte_end":127759,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":465},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":128060,"byte_end":128077,"line_start":163,"line_end":163,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[{"value":"/ Main decompression struct.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":128014,"byte_end":128044,"line_start":161,"line_end":161,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":128045,"byte_end":128048,"line_start":162,"line_end":162,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129258,"byte_end":129261,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"fn new() -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129185,"byte_end":129246,"line_start":199,"line_end":199,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129398,"byte_end":129402,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"fn init(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"/ Set the current state to `Start`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129335,"byte_end":129372,"line_start":204,"line_end":204,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129377,"byte_end":129386,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129707,"byte_end":129714,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"fn adler32(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n Note: Will return Some(1) if decompressing zlib but ignoring adler32.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 checksum of the currently decompressed data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129535,"byte_end":129603,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/ Note: Will return Some(1) if decompressing zlib but ignoring adler32.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129608,"byte_end":129681,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129686,"byte_end":129695,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130020,"byte_end":130034,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"adler32_header","qualname":"<DecompressorOxide>::adler32_header","value":"fn adler32_header(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 that was read from the zlib header if it exists.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 that was read from the zlib header if it exists.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129922,"byte_end":129994,"line_start":222,"line_end":222,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129999,"byte_end":130008,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130378,"byte_end":130385,"line_start":236,"line_end":236,"column_start":8,"column_end":15},"name":"default","qualname":"<DecompressorOxide as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3128},"children":[],"decl_id":{"krate":1,"index":3129},"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130287,"byte_end":130348,"line_start":234,"line_end":234,"column_start":5,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130353,"byte_end":130370,"line_start":235,"line_end":235,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":160057,"byte_end":160067,"line_start":1067,"line_end":1067,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"fn decompress(&mut DecompressorOxide, &[u8], &mut [u8], usize, u32)\n-> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[{"value":"/ Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158050,"byte_end":158143,"line_start":1031,"line_end":1031,"column_start":1,"column_end":94}},{"value":"/ empty, `out` is full, the end of the deflate stream is hit, or there is an error in the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158144,"byte_end":158235,"line_start":1032,"line_end":1032,"column_start":1,"column_end":92}},{"value":"/ deflate stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158236,"byte_end":158255,"line_start":1033,"line_end":1033,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158256,"byte_end":158259,"line_start":1034,"line_end":1034,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158260,"byte_end":158275,"line_start":1035,"line_end":1035,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158276,"byte_end":158279,"line_start":1036,"line_end":1036,"column_start":1,"column_end":4}},{"value":"/ `r` is a [`DecompressorOxide`] struct with the state of this stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158280,"byte_end":158352,"line_start":1037,"line_end":1037,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158353,"byte_end":158356,"line_start":1038,"line_end":1038,"column_start":1,"column_end":4}},{"value":"/ `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158357,"byte_end":158457,"line_start":1039,"line_end":1039,"column_start":1,"column_end":101}},{"value":"/ start at the first byte of this buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158458,"byte_end":158501,"line_start":1040,"line_end":1040,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158502,"byte_end":158505,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/ `out` is a reference to the buffer that will store the decompressed data, and that","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158506,"byte_end":158592,"line_start":1042,"line_end":1042,"column_start":1,"column_end":87}},{"value":"/ stores previously decompressed data if any.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158593,"byte_end":158640,"line_start":1043,"line_end":1043,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158641,"byte_end":158644,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ * The offset given by `out_pos` indicates where in the output buffer slice writing should start.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158645,"byte_end":158745,"line_start":1045,"line_end":1045,"column_start":1,"column_end":101}},{"value":"/ * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158746,"byte_end":158842,"line_start":1046,"line_end":1046,"column_start":1,"column_end":97}},{"value":"/ wrapping manner, and it's size is required to be a power of 2.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158843,"byte_end":158909,"line_start":1047,"line_end":1047,"column_start":1,"column_end":67}},{"value":"/ * The decompression function normally needs access to 32KiB of the previously decompressed data","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":158910,"byte_end":159009,"line_start":1048,"line_end":1048,"column_start":1,"column_end":100}},{"value":"/(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159010,"byte_end":159101,"line_start":1049,"line_end":1049,"column_start":1,"column_end":92}},{"value":"/     - If this data is not available, decompression may fail.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159102,"byte_end":159166,"line_start":1050,"line_end":1050,"column_start":1,"column_end":65}},{"value":"/     - Some deflate compressors allow specifying a window size which limits match distances to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159167,"byte_end":159264,"line_start":1051,"line_end":1051,"column_start":1,"column_end":98}},{"value":"/ less than this, or alternatively an RLE mode where matches will only refer to the previous byte","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159265,"byte_end":159364,"line_start":1052,"line_end":1052,"column_start":1,"column_end":100}},{"value":"/ and thus allows a smaller output buffer. The window size can be specified in the zlib","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159365,"byte_end":159454,"line_start":1053,"line_end":1053,"column_start":1,"column_end":90}},{"value":"/ header structure, however, the header data should not be relied on to be correct.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159455,"byte_end":159540,"line_start":1054,"line_end":1054,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159541,"byte_end":159544,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ `flags` indicates settings and status to the decompression function.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159545,"byte_end":159617,"line_start":1056,"line_end":1056,"column_start":1,"column_end":73}},{"value":"/ * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159618,"byte_end":159719,"line_start":1057,"line_end":1057,"column_start":1,"column_end":102}},{"value":"/ in a subsequent call to this function.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159720,"byte_end":159762,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ * See the the [`inflate_flags`] module for details on other flags.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159763,"byte_end":159833,"line_start":1059,"line_end":1059,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159834,"byte_end":159837,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159838,"byte_end":159851,"line_start":1061,"line_end":1061,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159852,"byte_end":159855,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple containing the status of the compressor, the number of input bytes read, and the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159856,"byte_end":159956,"line_start":1063,"line_end":1063,"column_start":1,"column_end":101}},{"value":"/ number of bytes output to `out`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159957,"byte_end":159993,"line_start":1064,"line_end":1064,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159994,"byte_end":159997,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This function shouldn't panic pending any bugs.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":159998,"byte_end":160049,"line_start":1066,"line_end":1066,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":554},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","parent":null,"children":[{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming decompression functionality.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198057,"byte_end":198105,"line_start":1,"line_end":1,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198106,"byte_end":198109,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly intended for use to build a higher-level wrapper.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198110,"byte_end":198188,"line_start":3,"line_end":3,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":600},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198569,"byte_end":198580,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"ResetPolicy","qualname":"::inflate::stream::ResetPolicy","value":"ResetPolicy","parent":null,"children":[{"krate":0,"index":601}],"decl_id":null,"docs":" Tag that determines reset policy of [InflateState](struct.InflateState.html)\n","sig":null,"attributes":[{"value":"/ Tag that determines reset policy of [InflateState](struct.InflateState.html)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198478,"byte_end":198558,"line_start":12,"line_end":12,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198613,"byte_end":198618,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"reset","qualname":"::inflate::stream::ResetPolicy::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":600},"children":[],"decl_id":null,"docs":" Performs reset\n","sig":null,"attributes":[{"value":"/ Performs reset","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198587,"byte_end":198605,"line_start":14,"line_end":14,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":602},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198840,"byte_end":198848,"line_start":21,"line_end":21,"column_start":12,"column_end":20},"name":"MinReset","qualname":"::inflate::stream::MinReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state, without performing expensive ops (e.g. zeroing buffer)","sig":null,"attributes":[{"value":"/ Resets state, without performing expensive ops (e.g. zeroing buffer)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198656,"byte_end":198728,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198729,"byte_end":198732,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Note that not zeroing buffer can lead to security issues when dealing with untrusted input.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198733,"byte_end":198828,"line_start":20,"line_end":20,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198890,"byte_end":198895,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"reset","qualname":"<MinReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":600},"children":[],"decl_id":{"krate":0,"index":601},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199245,"byte_end":199254,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"ZeroReset","qualname":"::inflate::stream::ZeroReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state and zero memory, continuing to use the same data format.\n","sig":null,"attributes":[{"value":"/ Resets state and zero memory, continuing to use the same data format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199160,"byte_end":199233,"line_start":34,"line_end":34,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199311,"byte_end":199316,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"reset","qualname":"<ZeroReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":600},"children":[],"decl_id":{"krate":0,"index":601},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199294,"byte_end":199303,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":611},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199549,"byte_end":199558,"line_start":48,"line_end":48,"column_start":12,"column_end":21},"name":"FullReset","qualname":"::inflate::stream::FullReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Full reset of the state, including zeroing memory.","sig":null,"attributes":[{"value":"/ Full reset of the state, including zeroing memory.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199438,"byte_end":199492,"line_start":45,"line_end":45,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199493,"byte_end":199496,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Requires to provide new data format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199497,"byte_end":199537,"line_start":47,"line_end":47,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":613},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199559,"byte_end":199573,"line_start":48,"line_end":48,"column_start":22,"column_end":36},"name":"0","qualname":"::inflate::stream::FullReset::0","value":"DataFormat","parent":{"krate":0,"index":611},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199631,"byte_end":199636,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"reset","qualname":"<FullReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":600},"children":[],"decl_id":{"krate":0,"index":601},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199614,"byte_end":199623,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":616},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199852,"byte_end":199864,"line_start":60,"line_end":60,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[{"value":"/ A struct that compbines a decompressor with extra data for streaming decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199749,"byte_end":199836,"line_start":58,"line_end":58,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199837,"byte_end":199840,"line_start":59,"line_end":59,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":200667,"byte_end":200674,"line_start":85,"line_end":85,"column_start":8,"column_end":15},"name":"default","qualname":"<InflateState as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3128},"children":[],"decl_id":{"krate":1,"index":3129},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201373,"byte_end":201376,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"fn new(DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[{"value":"/ Create a new state.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201055,"byte_end":201078,"line_start":99,"line_end":99,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201083,"byte_end":201086,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Note that this struct is quite large due to internal buffers, and as such storing it on","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201091,"byte_end":201182,"line_start":101,"line_end":101,"column_start":5,"column_end":96}},{"value":"/ the stack is not recommended.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201187,"byte_end":201220,"line_start":102,"line_end":102,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201225,"byte_end":201228,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201233,"byte_end":201249,"line_start":104,"line_end":104,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201254,"byte_end":201343,"line_start":105,"line_end":105,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201348,"byte_end":201361,"line_start":106,"line_end":106,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201745,"byte_end":201754,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"fn new_boxed(DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[{"value":"/ Create a new state on the heap.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201522,"byte_end":201557,"line_start":114,"line_end":114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201562,"byte_end":201565,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201570,"byte_end":201586,"line_start":116,"line_end":116,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201591,"byte_end":201680,"line_start":117,"line_end":117,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201685,"byte_end":201698,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201703,"byte_end":201733,"line_start":119,"line_end":119,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201963,"byte_end":201975,"line_start":127,"line_end":127,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"fn decompressor(&mut Self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[{"value":"/ Access the innner decompressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201916,"byte_end":201951,"line_start":126,"line_end":126,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202146,"byte_end":202157,"line_start":132,"line_end":132,"column_start":18,"column_end":29},"name":"last_status","qualname":"<InflateState>::last_status","value":"const fn last_status(&Self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[{"value":"/ Return the status of the last call to `inflate` with this `InflateState`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202051,"byte_end":202128,"line_start":131,"line_end":131,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202518,"byte_end":202544,"line_start":142,"line_end":142,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"fn new_boxed_with_window_bits(i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[{"value":"/ Create a new state using miniz/zlib style window bits parameter.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202218,"byte_end":202286,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202291,"byte_end":202294,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ The decompressor does not support different window sizes. As such,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202299,"byte_end":202369,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/ any positive (>0) value will set the zlib header flag, while a negative one","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202374,"byte_end":202453,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/ will not.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202458,"byte_end":202471,"line_start":140,"line_end":140,"column_start":5,"column_end":18}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202476,"byte_end":202506,"line_start":141,"line_end":141,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202848,"byte_end":202853,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"fn reset(&mut Self, DataFormat)","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202729,"byte_end":202738,"line_start":148,"line_end":148,"column_start":5,"column_end":14}},{"value":"/ Reset the decompressor without re-allocating memory, using the given","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202743,"byte_end":202815,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/ data format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202820,"byte_end":202836,"line_start":150,"line_end":150,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203027,"byte_end":203035,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"reset_as","qualname":"<InflateState>::reset_as","value":"fn reset_as<T>(&mut Self, T) where T: ResetPolicy","parent":null,"children":[],"decl_id":null,"docs":" Resets the state according to specified policy.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202950,"byte_end":202959,"line_start":155,"line_end":155,"column_start":5,"column_end":14}},{"value":"/ Resets the state according to specified policy.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":202964,"byte_end":203015,"line_start":156,"line_end":156,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":638},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204360,"byte_end":204367,"line_start":185,"line_end":185,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"fn inflate(&mut InflateState, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given [`InflateState`]","sig":null,"attributes":[{"value":"/ Try to decompress from `input` to `output` with the given [`InflateState`]","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203112,"byte_end":203190,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203191,"byte_end":203194,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ # `flush`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203195,"byte_end":203208,"line_start":164,"line_end":164,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203209,"byte_end":203212,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Generally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203213,"byte_end":203313,"line_start":166,"line_end":166,"column_start":1,"column_end":101}},{"value":"/ supplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203314,"byte_end":203414,"line_start":167,"line_end":167,"column_start":1,"column_end":101}},{"value":"/ signal that the stream is expected to finish, and failing to do so is an error.  It isn't","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203415,"byte_end":203508,"line_start":168,"line_end":168,"column_start":1,"column_end":94}},{"value":"/ necessary to specify it when the stream ends; you'll still get returned a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203509,"byte_end":203586,"line_start":169,"line_end":169,"column_start":1,"column_end":78}},{"value":"/ [`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203587,"byte_end":203681,"line_start":170,"line_end":170,"column_start":1,"column_end":95}},{"value":"/ likely that you'll almost always just want to use [`MZFlush::None`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203682,"byte_end":203754,"line_start":171,"line_end":171,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203755,"byte_end":203758,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203759,"byte_end":203771,"line_start":173,"line_end":173,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203772,"byte_end":203775,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203776,"byte_end":203875,"line_start":175,"line_end":175,"column_start":1,"column_end":100}},{"value":"/ to lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203876,"byte_end":203970,"line_start":176,"line_end":176,"column_start":1,"column_end":95}},{"value":"/ consumed.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203971,"byte_end":203984,"line_start":177,"line_end":177,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203985,"byte_end":203988,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Data`] if this or a a previous call failed with an error return from","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":203989,"byte_end":204080,"line_start":179,"line_end":179,"column_start":1,"column_end":92}},{"value":"/ [`TINFLStatus`]; probably indicates corrupted data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204081,"byte_end":204136,"line_start":180,"line_end":180,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204137,"byte_end":204140,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204141,"byte_end":204223,"line_start":182,"line_end":182,"column_start":1,"column_end":83}},{"value":"/ decompression), or when called without [`MZFlush::Finish`] after an earlier call with","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204224,"byte_end":204313,"line_start":183,"line_end":183,"column_start":1,"column_end":90}},{"value":"/ [`MZFlush::Finish`] has been made.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":204314,"byte_end":204352,"line_start":184,"line_end":184,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":949},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108939,"byte_end":108963,"line_start":34,"line_end":34,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was no more data, so the\n input stream is likely truncated.","sig":null,"attributes":[{"value":"/ More input data was expected, but the caller indicated that there was no more data, so the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108364,"byte_end":108458,"line_start":26,"line_end":26,"column_start":5,"column_end":99}},{"value":"/ input stream is likely truncated.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108463,"byte_end":108500,"line_start":27,"line_end":27,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108505,"byte_end":108508,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This can't happen if you have provided the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108513,"byte_end":108559,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"/ [`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108564,"byte_end":108657,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ decompression.  By setting that flag, you indicate more input exists but is not provided,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108662,"byte_end":108755,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ and so reaching the end of the input data without finding the end of the compressed stream","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108760,"byte_end":108854,"line_start":32,"line_end":32,"column_start":5,"column_end":99}},{"value":"/ would instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108859,"byte_end":108934,"line_start":33,"line_end":33,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":952},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109097,"byte_end":109105,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" The output buffer is an invalid size; consider the `flags` parameter.\n","sig":null,"attributes":[{"value":"/ The output buffer is an invalid size; consider the `flags` parameter.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109019,"byte_end":109092,"line_start":36,"line_end":36,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":955},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109259,"byte_end":109274,"line_start":41,"line_end":41,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[{"value":"/ The decompression went fine, but the adler32 checksum did not match the one","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109143,"byte_end":109222,"line_start":39,"line_end":39,"column_start":5,"column_end":84}},{"value":"/ provided in the header.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109227,"byte_end":109254,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":958},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109369,"byte_end":109375,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[{"value":"/ Failed to decompress due to invalid data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109319,"byte_end":109364,"line_start":43,"line_end":43,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":961},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109539,"byte_end":109543,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" Finished decompression without issues.","sig":null,"attributes":[{"value":"/ Finished decompression without issues.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109410,"byte_end":109452,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109457,"byte_end":109460,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This indicates the end of the compressed stream has been reached.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109465,"byte_end":109534,"line_start":48,"line_end":48,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":964},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110142,"byte_end":110156,"line_start":59,"line_end":59,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.","sig":null,"attributes":[{"value":"/ The decompressor needs more input data to continue decompressing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109576,"byte_end":109645,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109650,"byte_end":109653,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This occurs when there's no more consumable input, but the end of the stream hasn't been","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109658,"byte_end":109750,"line_start":53,"line_end":53,"column_start":5,"column_end":97}},{"value":"/ reached, and you have supplied the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109755,"byte_end":109793,"line_start":54,"line_end":54,"column_start":5,"column_end":43}},{"value":"/ [`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109798,"byte_end":109891,"line_start":55,"line_end":55,"column_start":5,"column_end":98}},{"value":"/ decompressor.  Had you not supplied that flag (which would mean you were asserting that you","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109896,"byte_end":109991,"line_start":56,"line_end":56,"column_start":5,"column_end":100}},{"value":"/ believed all the data was available) you would have gotten a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":109996,"byte_end":110060,"line_start":57,"line_end":57,"column_start":5,"column_end":69}},{"value":"/ [`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110065,"byte_end":110137,"line_start":58,"line_end":58,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110275,"byte_end":110288,"line_start":62,"line_end":62,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[{"value":"/ There is still pending data that didn't fit in the output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110201,"byte_end":110270,"line_start":61,"line_end":61,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":948},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108346,"byte_end":108357,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"enum TINFLStatus {\n    FailedCannotMakeProgress = ,\n    BadParam = ,\n    Adler32Mismatch = ,\n    Failed = ,\n    Done = ,\n    NeedsMoreInput = ,\n    HasMoreOutput = ,\n}","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":952},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108249,"byte_end":108273,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"repr(i8)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":108274,"byte_end":108285,"line_start":23,"line_end":23,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110360,"byte_end":110368,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"fn from_i32(i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":984},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111056,"byte_end":111071,"line_start":84,"line_end":84,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::inflate::DecompressError","value":"DecompressError { status, output }","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"decl_id":null,"docs":" Struct return when decompress_to_vec functions fail.\n","sig":null,"attributes":[{"value":"/ Struct return when decompress_to_vec functions fail.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110940,"byte_end":110996,"line_start":81,"line_end":81,"column_start":1,"column_end":57}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110997,"byte_end":111027,"line_start":82,"line_end":82,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":985},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111153,"byte_end":111159,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"status","qualname":"::inflate::DecompressError::status","value":"inflate::TINFLStatus","parent":{"krate":0,"index":984},"children":[],"decl_id":null,"docs":" Decompressor status on failure. See [TINFLStatus] for details.\n","sig":null,"attributes":[{"value":"/ Decompressor status on failure. See [TINFLStatus] for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111078,"byte_end":111144,"line_start":85,"line_end":85,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":986},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111230,"byte_end":111236,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"name":"output","qualname":"::inflate::DecompressError::output","value":"alloc::vec::Vec<u8>","parent":{"krate":0,"index":984},"children":[],"decl_id":null,"docs":" The currently decompressed data if any.\n","sig":null,"attributes":[{"value":"/ The currently decompressed data if any.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111178,"byte_end":111221,"line_start":87,"line_end":87,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111335,"byte_end":111338,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DecompressError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut ::core::fmt::Formatter) -> ::core::fmt::Result","parent":{"krate":1,"index":9907},"children":[],"decl_id":{"krate":1,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112959,"byte_end":112976,"line_start":124,"line_end":124,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"fn decompress_to_vec(&[u8]) -> Result<Vec<u8>, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112288,"byte_end":112351,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112352,"byte_end":112355,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ NOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112356,"byte_end":112480,"line_start":117,"line_end":117,"column_start":1,"column_end":125}},{"value":"/ It is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112481,"byte_end":112610,"line_start":118,"line_end":118,"column_start":1,"column_end":130}},{"value":"/ ideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112611,"byte_end":112723,"line_start":119,"line_end":119,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112724,"byte_end":112727,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ Returns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112728,"byte_end":112910,"line_start":121,"line_end":121,"column_start":1,"column_end":183}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112911,"byte_end":112920,"line_start":122,"line_end":122,"column_start":1,"column_end":10}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":112921,"byte_end":112951,"line_start":123,"line_end":123,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113783,"byte_end":113805,"line_start":137,"line_end":137,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"fn decompress_to_vec_zlib(&[u8]) -> Result<Vec<u8>, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113090,"byte_end":113175,"line_start":128,"line_end":128,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113176,"byte_end":113179,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ NOTE: This function will not bound the output, so if the output is large enough it can result in an out of memory error.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113180,"byte_end":113304,"line_start":130,"line_end":130,"column_start":1,"column_end":125}},{"value":"/ It is therefore suggested to not use this for anything other than test programs, use the functions with a specified limit, or","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113305,"byte_end":113434,"line_start":131,"line_end":131,"column_start":1,"column_end":130}},{"value":"/ ideally streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113435,"byte_end":113547,"line_start":132,"line_end":132,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113548,"byte_end":113551,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Returns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] containing the status and so far decompressed data if any on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113552,"byte_end":113734,"line_start":134,"line_end":134,"column_start":1,"column_end":183}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113735,"byte_end":113744,"line_start":135,"line_end":135,"column_start":1,"column_end":10}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113745,"byte_end":113775,"line_start":136,"line_end":136,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114764,"byte_end":114792,"line_start":156,"line_end":156,"column_start":8,"column_end":36},"name":"decompress_to_vec_with_limit","qualname":"::inflate::decompress_to_vec_with_limit","value":"fn decompress_to_vec_with_limit(&[u8], usize)\n-> Result<Vec<u8>, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":113992,"byte_end":114055,"line_start":145,"line_end":145,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114056,"byte_end":114059,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114060,"byte_end":114151,"line_start":147,"line_end":147,"column_start":1,"column_end":92}},{"value":"/ the error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114152,"byte_end":114293,"line_start":148,"line_end":148,"column_start":1,"column_end":142}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114294,"byte_end":114297,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ As this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114298,"byte_end":114458,"line_start":150,"line_end":150,"column_start":1,"column_end":161}},{"value":"/ It is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114459,"byte_end":114586,"line_start":151,"line_end":151,"column_start":1,"column_end":128}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114587,"byte_end":114590,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ Returns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114591,"byte_end":114715,"line_start":153,"line_end":153,"column_start":1,"column_end":125}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114716,"byte_end":114725,"line_start":154,"line_end":154,"column_start":1,"column_end":10}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114726,"byte_end":114756,"line_start":155,"line_end":155,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":658},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115714,"byte_end":115747,"line_start":173,"line_end":173,"column_start":8,"column_end":41},"name":"decompress_to_vec_zlib_with_limit","qualname":"::inflate::decompress_to_vec_zlib_with_limit","value":"fn decompress_to_vec_zlib_with_limit(&[u8], usize)\n-> Result<Vec<u8>, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n the error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":114924,"byte_end":115009,"line_start":163,"line_end":163,"column_start":1,"column_end":86}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115010,"byte_end":115101,"line_start":164,"line_end":164,"column_start":1,"column_end":92}},{"value":"/ the error [struct][DecompressError] will contain the status [`TINFLStatus::HasMoreOutput`] and the data that was decompressed on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115102,"byte_end":115243,"line_start":165,"line_end":165,"column_start":1,"column_end":142}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115244,"byte_end":115247,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ As this function tries to decompress everything in one go, it's not ideal for general use outside of tests or where the output size is expected to be small.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115248,"byte_end":115408,"line_start":167,"line_end":167,"column_start":1,"column_end":161}},{"value":"/ It is suggested to use streaming decompression via the [flate2](https://github.com/alexcrichton/flate2-rs) library instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115409,"byte_end":115536,"line_start":168,"line_end":168,"column_start":1,"column_end":128}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115537,"byte_end":115540,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ Returns a [`Result`] containing the [`Vec`] of decompressed data on success, and a [struct][DecompressError] on failure.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115541,"byte_end":115665,"line_start":170,"line_end":170,"column_start":1,"column_end":125}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115666,"byte_end":115675,"line_start":171,"line_end":171,"column_start":1,"column_end":10}},{"value":"cfg(feature = \"with-alloc\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":115676,"byte_end":115706,"line_start":172,"line_end":172,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":660},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":118225,"byte_end":118255,"line_start":238,"line_end":238,"column_start":8,"column_end":38},"name":"decompress_slice_iter_to_slice","qualname":"::inflate::decompress_slice_iter_to_slice","value":"fn decompress_slice_iter_to_slice<'out, 'inp,\nimpl Iterator<Item = &'inp [u8]>>(&'out mut [u8],\nimpl Iterator<Item = &'inp [u8]>, bool, bool) -> Result<usize, TINFLStatus>\nwhere impl Iterator<Item = &'inp [u8]>: Iterator<Item = &'inp [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decompress one or more source slices from an iterator into the output slice.","sig":null,"attributes":[{"value":"/ Decompress one or more source slices from an iterator into the output slice.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117553,"byte_end":117633,"line_start":225,"line_end":225,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117634,"byte_end":117637,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ * On success, returns the number of bytes that were written.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117638,"byte_end":117702,"line_start":227,"line_end":227,"column_start":1,"column_end":65}},{"value":"/ * On failure, returns the failure status code.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117703,"byte_end":117753,"line_start":228,"line_end":228,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117754,"byte_end":117757,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ This will fail if the output buffer is not large enough, but in that case","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117758,"byte_end":117835,"line_start":230,"line_end":230,"column_start":1,"column_end":78}},{"value":"/ the output buffer will still contain the partial decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117836,"byte_end":117903,"line_start":231,"line_end":231,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117904,"byte_end":117907,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ * `out` the output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117908,"byte_end":117938,"line_start":233,"line_end":233,"column_start":1,"column_end":31}},{"value":"/ * `it` the iterator of input slices.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117939,"byte_end":117979,"line_start":234,"line_end":234,"column_start":1,"column_end":41}},{"value":"/ * `zlib_header` if the first slice out of the iterator is expected to have a","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":117980,"byte_end":118060,"line_start":235,"line_end":235,"column_start":1,"column_end":81}},{"value":"/   Zlib header. Otherwise the slices are assumed to be the deflate data only.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":118061,"byte_end":118141,"line_start":236,"line_end":236,"column_start":1,"column_end":81}},{"value":"/ * `ignore_adler32` if the adler32 checksum should be calculated or not.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":118142,"byte_end":118217,"line_start":237,"line_end":237,"column_start":1,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":666},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/shared.rs","byte_start":212307,"byte_end":212322,"line_start":2,"line_end":2,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":667},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/shared.rs","byte_start":212359,"byte_end":212381,"line_start":5,"line_end":5,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":670},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/shared.rs","byte_start":212565,"byte_end":212579,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"fn update_adler32(u32, &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"simd\"))","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/shared.rs","byte_start":212528,"byte_end":212557,"line_start":12,"line_end":12,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1374,"byte_end":1378,"line_start":46,"line_end":46,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[{"value":"/ Don't force any flushing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1293,"byte_end":1322,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/ Used when more input data is expected.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1327,"byte_end":1369,"line_start":45,"line_end":45,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":993},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1455,"byte_end":1462,"line_start":49,"line_end":49,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as [`Sync`].\n","sig":null,"attributes":[{"value":"/ Zlib partial flush.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1388,"byte_end":1411,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/ Currently treated as [`Sync`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1416,"byte_end":1450,"line_start":48,"line_end":48,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1596,"byte_end":1600,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Finish compressing the currently buffered data, and output an empty raw block.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1472,"byte_end":1554,"line_start":50,"line_end":50,"column_start":5,"column_end":87}},{"value":"/ Has no use in decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1559,"byte_end":1591,"line_start":51,"line_end":51,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1852,"byte_end":1856,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Same as [`Sync`], but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.","sig":null,"attributes":[{"value":"/ Same as [`Sync`], but resets the compression dictionary so that further compressed","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1610,"byte_end":1696,"line_start":53,"line_end":53,"column_start":5,"column_end":91}},{"value":"/ data does not depend on data compressed before the flush.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1701,"byte_end":1762,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1767,"byte_end":1770,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Has no use in decompression, and is an error to supply in that case.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1775,"byte_end":1847,"line_start":56,"line_end":56,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1930,"byte_end":1936,"line_start":59,"line_end":59,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[{"value":"/ Attempt to flush the remaining data and end the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1866,"byte_end":1925,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1971,"byte_end":1976,"line_start":61,"line_end":61,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[{"value":"/ Not implemented.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1946,"byte_end":1966,"line_start":60,"line_end":60,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":989},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1279,"byte_end":1286,"line_start":43,"line_end":43,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"enum MZFlush { None = , Partial = , Sync = , Full = , Finish = , Block = , }","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"/ A list of flush types.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1093,"byte_end":1119,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1120,"byte_end":1123,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ See <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1124,"byte_end":1205,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1206,"byte_end":1218,"line_start":41,"line_end":41,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2126,"byte_end":2129,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[{"value":"/ Create an MZFlush value from an integer value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2004,"byte_end":2054,"line_start":65,"line_end":65,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2059,"byte_end":2062,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Returns `MZError::Param` on invalid values.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2067,"byte_end":2114,"line_start":67,"line_end":67,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2856,"byte_end":2858,"line_start":90,"line_end":90,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Operation succeeded.","sig":null,"attributes":[{"value":"/ Operation succeeded.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2702,"byte_end":2726,"line_start":86,"line_end":86,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2731,"byte_end":2734,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Some data was decompressed or compressed; see the byte counters in the [`StreamResult`] for","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2739,"byte_end":2834,"line_start":88,"line_end":88,"column_start":5,"column_end":100}},{"value":"/ details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2839,"byte_end":2851,"line_start":89,"line_end":89,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3122,"byte_end":3131,"line_start":97,"line_end":97,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Operation succeeded and end of deflate stream was found.","sig":null,"attributes":[{"value":"/ Operation succeeded and end of deflate stream was found.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2869,"byte_end":2929,"line_start":92,"line_end":92,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2934,"byte_end":2937,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ X-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2942,"byte_end":3004,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"/ [`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3009,"byte_end":3095,"line_start":95,"line_end":95,"column_start":5,"column_end":91}},{"value":"/ respectively.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3100,"byte_end":3117,"line_start":96,"line_end":96,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1029},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3157,"byte_end":3165,"line_start":100,"line_end":100,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3142,"byte_end":3152,"line_start":99,"line_end":99,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":1022},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2687,"byte_end":2695,"line_start":85,"line_end":85,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"enum MZStatus { Ok = , StreamEnd = , NeedDict = , }","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029}],"decl_id":null,"docs":" A list of miniz successful status codes.","sig":null,"attributes":[{"value":"/ A list of miniz successful status codes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2398,"byte_end":2442,"line_start":79,"line_end":79,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2443,"byte_end":2446,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ These are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2447,"byte_end":2543,"line_start":81,"line_end":81,"column_start":1,"column_end":97}},{"value":"/ [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2544,"byte_end":2613,"line_start":82,"line_end":82,"column_start":1,"column_end":70}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":2614,"byte_end":2626,"line_start":83,"line_end":83,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3489,"byte_end":3494,"line_start":111,"line_end":111,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3474,"byte_end":3484,"line_start":110,"line_end":110,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3781,"byte_end":3787,"line_start":119,"line_end":119,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" General stream error.","sig":null,"attributes":[{"value":"/ General stream error.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3506,"byte_end":3531,"line_start":113,"line_end":113,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3536,"byte_end":3539,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ See [`inflate::stream::inflate()`] docs for details of how it can occur there.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3544,"byte_end":3626,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3631,"byte_end":3634,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ See [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3639,"byte_end":3735,"line_start":117,"line_end":117,"column_start":5,"column_end":101}},{"value":"/ believed impossible in practice.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3740,"byte_end":3776,"line_start":118,"line_end":118,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1053},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3941,"byte_end":3945,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Error in inflation; see [`inflate::stream::inflate()`] for details.","sig":null,"attributes":[{"value":"/ Error in inflation; see [`inflate::stream::inflate()`] for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3799,"byte_end":3870,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3875,"byte_end":3878,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Not returned from [`deflate::stream::deflate()`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3883,"byte_end":3936,"line_start":123,"line_end":123,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1056},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3972,"byte_end":3975,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3957,"byte_end":3967,"line_start":126,"line_end":126,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1059},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4184,"byte_end":4187,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Buffer-related error.","sig":null,"attributes":[{"value":"/ Buffer-related error.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3987,"byte_end":4012,"line_start":129,"line_end":129,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4017,"byte_end":4020,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4025,"byte_end":4121,"line_start":131,"line_end":131,"column_start":5,"column_end":101}},{"value":"/ of when it would trigger in the one you're using.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4126,"byte_end":4179,"line_start":132,"line_end":132,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1062},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4214,"byte_end":4221,"line_start":136,"line_end":136,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4199,"byte_end":4209,"line_start":135,"line_end":135,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1065},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4439,"byte_end":4444,"line_start":142,"line_end":142,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":" Bad parameters.","sig":null,"attributes":[{"value":"/ Bad parameters.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4233,"byte_end":4252,"line_start":138,"line_end":138,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4257,"byte_end":4260,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4265,"byte_end":4361,"line_start":140,"line_end":140,"column_start":5,"column_end":101}},{"value":"/ [`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4366,"byte_end":4434,"line_start":141,"line_end":141,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":1046},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3460,"byte_end":3467,"line_start":109,"line_end":109,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"enum MZError {\n    ErrNo = ,\n    Stream = ,\n    Data = ,\n    Mem = ,\n    Buf = ,\n    Version = ,\n    Param = ,\n}","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1059},{"krate":0,"index":1062},{"krate":0,"index":1065}],"decl_id":null,"docs":" A list of miniz failed status codes.","sig":null,"attributes":[{"value":"/ A list of miniz failed status codes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3174,"byte_end":3214,"line_start":103,"line_end":103,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3215,"byte_end":3218,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ These are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3219,"byte_end":3316,"line_start":105,"line_end":105,"column_start":1,"column_end":98}},{"value":"/ [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3317,"byte_end":3386,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"repr(i32)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":3387,"byte_end":3399,"line_start":107,"line_end":107,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1083},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4666,"byte_end":4670,"line_start":150,"line_end":150,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":1082},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[{"value":"/ Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4590,"byte_end":4661,"line_start":149,"line_end":149,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1085},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4831,"byte_end":4849,"line_start":153,"line_end":153,"column_start":5,"column_end":23},"name":"ZLibIgnoreChecksum","qualname":"::DataFormat::ZLibIgnoreChecksum","value":"DataFormat::ZLibIgnoreChecksum","parent":{"krate":0,"index":1082},"children":[],"decl_id":null,"docs":" Zlib wrapped but ignore and don't compute the adler32 checksum.\n Currently only used for inflate, behaves the same as Zlib for compression.\n","sig":null,"attributes":[{"value":"/ Zlib wrapped but ignore and don't compute the adler32 checksum.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4676,"byte_end":4743,"line_start":151,"line_end":151,"column_start":5,"column_end":72}},{"value":"/ Currently only used for inflate, behaves the same as Zlib for compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4748,"byte_end":4826,"line_start":152,"line_end":152,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1087},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4876,"byte_end":4879,"line_start":155,"line_end":155,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":1082},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[{"value":"/ Raw DEFLATE.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4855,"byte_end":4871,"line_start":154,"line_end":154,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":1082},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4573,"byte_end":4583,"line_start":148,"line_end":148,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"enum DataFormat { Zlib, ZLibIgnoreChecksum, Raw, }","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1085},{"krate":0,"index":1087}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"/ How compressed data is wrapped.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4459,"byte_end":4494,"line_start":145,"line_end":145,"column_start":1,"column_end":36}},{"value":"non_exhaustive","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4546,"byte_end":4563,"line_start":147,"line_end":147,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4913,"byte_end":4929,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"from_window_bits","qualname":"<DataFormat>::from_window_bits","value":"fn from_window_bits(i32) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5095,"byte_end":5109,"line_start":167,"line_end":167,"column_start":12,"column_end":26},"name":"to_window_bits","qualname":"<DataFormat>::to_window_bits","value":"fn to_window_bits(Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":686},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5409,"byte_end":5417,"line_start":176,"line_end":176,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[{"value":"/ `Result` alias for all miniz status codes both successful and failed.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5326,"byte_end":5399,"line_start":175,"line_end":175,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1103},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5603,"byte_end":5615,"line_start":180,"line_end":180,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"/ A structure containg the result of a call to the inflate or deflate streaming functions.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5448,"byte_end":5540,"line_start":178,"line_end":178,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":1104},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5685,"byte_end":5699,"line_start":182,"line_end":182,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":1103},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input slice.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5622,"byte_end":5676,"line_start":181,"line_end":181,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1105},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5773,"byte_end":5786,"line_start":184,"line_end":184,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":1103},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes written to the output slice.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5712,"byte_end":5764,"line_start":183,"line_end":183,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1106},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5842,"byte_end":5848,"line_start":186,"line_end":186,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"core::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":1103},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[{"value":"/ The return status of the call.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5799,"byte_end":5833,"line_start":185,"line_end":185,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5914,"byte_end":5919,"line_start":191,"line_end":191,"column_start":18,"column_end":23},"name":"error","qualname":"<StreamResult>::error","value":"const fn error(MZError) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5887,"byte_end":5896,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6150,"byte_end":6154,"line_start":201,"line_end":201,"column_start":8,"column_end":12},"name":"from","qualname":"<MZResult as core::convert::From>::from","value":"fn from(StreamResult) -> Self","parent":{"krate":1,"index":3056},"children":[],"decl_id":{"krate":1,"index":3058},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6274,"byte_end":6278,"line_start":207,"line_end":207,"column_start":8,"column_end":12},"name":"from","qualname":"<MZResult as core::convert::From>::from","value":"fn from(&StreamResult) -> Self","parent":{"krate":1,"index":3056},"children":[],"decl_id":{"krate":1,"index":3058},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14499,"byte_end":14510,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14623,"byte_end":14634,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14901,"byte_end":14909,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26389,"byte_end":26399,"line_start":230,"line_end":230,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26741,"byte_end":26751,"line_start":242,"line_end":242,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32225,"byte_end":32240,"line_start":421,"line_end":421,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35724,"byte_end":35739,"line_start":517,"line_end":517,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":36376,"byte_end":36388,"line_start":538,"line_end":538,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":37061,"byte_end":37072,"line_start":562,"line_end":562,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":37951,"byte_end":37962,"line_start":594,"line_end":594,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":38915,"byte_end":38928,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":40486,"byte_end":40503,"line_start":685,"line_end":685,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":41714,"byte_end":41723,"line_start":734,"line_end":734,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":43543,"byte_end":43546,"line_start":786,"line_end":786,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":45559,"byte_end":45571,"line_start":846,"line_end":846,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":45836,"byte_end":45848,"line_start":856,"line_end":856,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":58254,"byte_end":58263,"line_start":1219,"line_end":1219,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":65470,"byte_end":65481,"line_start":1414,"line_end":1414,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":67194,"byte_end":67201,"line_start":1473,"line_end":1473,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":122496,"byte_end":122508,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129161,"byte_end":129178,"line_start":198,"line_end":198,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130263,"byte_end":130280,"line_start":233,"line_end":233,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":131992,"byte_end":131997,"line_start":305,"line_end":305,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/output_buffer.rs","byte_start":196852,"byte_end":196864,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198872,"byte_end":198880,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199278,"byte_end":199287,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199598,"byte_end":199607,"line_start":50,"line_end":50,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":200645,"byte_end":200657,"line_start":84,"line_end":84,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201036,"byte_end":201048,"line_start":98,"line_end":98,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110335,"byte_end":110346,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111310,"byte_end":111325,"line_start":92,"line_end":92,"column_start":30,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1990,"byte_end":1997,"line_start":64,"line_end":64,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4889,"byte_end":4899,"line_start":158,"line_end":158,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5868,"byte_end":5880,"line_start":189,"line_end":189,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6132,"byte_end":6140,"line_start":200,"line_end":200,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6256,"byte_end":6264,"line_start":206,"line_end":206,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":928,"byte_end":935,"line_start":31,"line_end":31,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6466,"byte_end":6470,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/mod.rs","byte_start":6480,"byte_end":6486,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":361}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":945,"byte_end":952,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":107880,"byte_end":107884,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":407}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":107913,"byte_end":107919,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":554}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14499,"byte_end":14510,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14623,"byte_end":14634,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/buffer.rs","byte_start":14901,"byte_end":14909,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":41},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26389,"byte_end":26399,"line_start":230,"line_end":230,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":743},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":26741,"byte_end":26751,"line_start":242,"line_end":242,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":32225,"byte_end":32240,"line_start":421,"line_end":421,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":35724,"byte_end":35739,"line_start":517,"line_end":517,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":157},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":36376,"byte_end":36388,"line_start":538,"line_end":538,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":37061,"byte_end":37072,"line_start":562,"line_end":562,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":37951,"byte_end":37962,"line_start":594,"line_end":594,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":38915,"byte_end":38928,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":40486,"byte_end":40503,"line_start":685,"line_end":685,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":41714,"byte_end":41723,"line_start":734,"line_end":734,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":43543,"byte_end":43546,"line_start":786,"line_end":786,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":45559,"byte_end":45571,"line_start":846,"line_end":846,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":45836,"byte_end":45848,"line_start":856,"line_end":856,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":58254,"byte_end":58263,"line_start":1219,"line_end":1219,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":65470,"byte_end":65481,"line_start":1414,"line_end":1414,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/deflate/core.rs","byte_start":67194,"byte_end":67201,"line_start":1473,"line_end":1473,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":122496,"byte_end":122508,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":129161,"byte_end":129178,"line_start":198,"line_end":198,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":130263,"byte_end":130280,"line_start":233,"line_end":233,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/core.rs","byte_start":131992,"byte_end":131997,"line_start":305,"line_end":305,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/output_buffer.rs","byte_start":196852,"byte_end":196864,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":540},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":198872,"byte_end":198880,"line_start":23,"line_end":23,"column_start":22,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":602},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199278,"byte_end":199287,"line_start":37,"line_end":37,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":606},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":199598,"byte_end":199607,"line_start":50,"line_end":50,"column_start":22,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":611},"to":{"krate":0,"index":600}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":200645,"byte_end":200657,"line_start":84,"line_end":84,"column_start":18,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":616},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/stream.rs","byte_start":201036,"byte_end":201048,"line_start":98,"line_end":98,"column_start":6,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":110335,"byte_end":110346,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/inflate/mod.rs","byte_start":111310,"byte_end":111325,"line_start":92,"line_end":92,"column_start":30,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":984},"to":{"krate":1,"index":9907}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":1990,"byte_end":1997,"line_start":64,"line_end":64,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":4889,"byte_end":4899,"line_start":158,"line_end":158,"column_start":6,"column_end":16},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1082},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":5868,"byte_end":5880,"line_start":189,"line_end":189,"column_start":6,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6132,"byte_end":6140,"line_start":200,"line_end":200,"column_start":44,"column_end":52},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.6.2/src/lib.rs","byte_start":6256,"byte_end":6264,"line_start":206,"line_end":206,"column_start":45,"column_end":53},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":686},"to":{"krate":1,"index":3056}}]}