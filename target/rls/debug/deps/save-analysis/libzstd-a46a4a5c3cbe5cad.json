{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2","program":"/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","zstd","--edition=2018","/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"arrays\"","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","--cfg","feature=\"zdict_builder\"","-C","metadata=a46a4a5c3cbe5cad","-C","extra-filename=-a46a4a5c3cbe5cad","--out-dir","/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","-L","dependency=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","--extern","zstd_safe=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libzstd_safe-7f7400e04d3e1f31.rmeta","--cap-lints","allow","-L","native=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/build/zstd-sys-6bef3beccb535936/out","--error-format=json","--sysroot","/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libzstd-a46a4a5c3cbe5cad.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[9995121827904389669,0]},"crate_root":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src","external_crates":[{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9914303954752503396,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15846600599516386926,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3248197779922953368,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16106073209810206859,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[705058097557950442,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4226859831290989395,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8113236783331938933,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17166186933304791475,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[9102879459332679527,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17334790913793278849,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15832914008974928315,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4406420180649270496,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[1969707906566880681,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[13786306822812891743,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3136484058452542816,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[4549596711944770628,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11754765901466761141,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[12231018808310572442,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12139228928510032792,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","num":20,"id":{"name":"zstd_safe","disambiguator":[12260696503104506671,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","num":21,"id":{"name":"zstd_sys","disambiguator":[4972754083480599379,0]}}],"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":0,"byte_end":2001,"line_start":1,"line_end":78,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":703,"byte_end":712,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"alias_span":null,"name":"zstd_safe","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":595},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2283,"byte_end":2293,"line_start":13,"line_end":13,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2323,"byte_end":2335,"line_start":14,"line_end":14,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":6}},{"kind":"Use","ref_id":{"krate":20,"index":163},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14122,"byte_end":14127,"line_start":20,"line_end":20,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":20,"index":184},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14129,"byte_end":14134,"line_start":20,"line_end":20,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/mod.rs","byte_start":47406,"byte_end":47412,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":354}},{"kind":"Use","ref_id":{"krate":0,"index":424},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/mod.rs","byte_start":47436,"byte_end":47442,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":354}},{"kind":"Use","ref_id":{"krate":20,"index":379},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63454,"byte_end":63464,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":461}},{"kind":"Use","ref_id":{"krate":20,"index":339},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63466,"byte_end":63476,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":461}},{"kind":"Use","ref_id":{"krate":20,"index":363},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63478,"byte_end":63486,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":461}},{"kind":"Use","ref_id":{"krate":20,"index":370},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63488,"byte_end":63497,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":461}},{"kind":"Use","ref_id":{"krate":20,"index":210},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63499,"byte_end":63507,"line_start":9,"line_end":9,"column_start":66,"column_end":74},"alias_span":null,"name":"WriteBuf","value":"","parent":{"krate":0,"index":461}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20399,"byte_end":20410,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20412,"byte_end":20423,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":344},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20425,"byte_end":20435,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20437,"byte_end":20447,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20470,"byte_end":20477,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20501,"byte_end":20518,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20520,"byte_end":20527,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":122}},{"kind":"Use","ref_id":{"krate":20,"index":352},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":838,"byte_end":852,"line_start":36,"line_end":36,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":344},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":1124,"byte_end":1134,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":349},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":1136,"byte_end":1146,"line_start":45,"line_end":45,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":1148,"byte_end":1155,"line_start":45,"line_end":45,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":1157,"byte_end":1164,"line_start":45,"line_end":45,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":0,"byte_end":2001,"line_start":1,"line_end":78,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":77},{"krate":0,"index":122},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use std::io;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":394,"byte_end":410,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":411,"byte_end":414,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ // Uncompress input and print the result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":415,"byte_end":460,"line_start":16,"line_end":16,"column_start":1,"column_end":46}},{"value":"/ zstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":461,"byte_end":527,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":528,"byte_end":535,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":536,"byte_end":539,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":540,"byte_end":584,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":585,"byte_end":607,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bulk","qualname":"::bulk","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":36},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":" Compress and decompress data in bulk.","sig":null,"attributes":[{"value":"/ Compress and decompress data in bulk.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2003,"byte_end":2044,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2045,"byte_end":2048,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2049,"byte_end":2102,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2103,"byte_end":2161,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2162,"byte_end":2195,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4339,"byte_end":4349,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::bulk::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":597}],"decl_id":null,"docs":" Allows to compress independently multiple chunks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple chunks of data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":3783,"byte_end":3844,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":3845,"byte_end":3848,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Each job will be processed entirely in-memory without streaming, so this","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":3849,"byte_end":3925,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ is most fitting for many small jobs. To compress larger volume that don't","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":3926,"byte_end":4003,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ easily fit in memory, a streaming compression may be more appropriate.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4004,"byte_end":4078,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4079,"byte_end":4082,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ It is more efficient than a streaming compressor for 2 reasons:","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4083,"byte_end":4150,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ * It re-uses the zstd context between jobs to avoid re-allocations","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4151,"byte_end":4221,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ * It avoids copying data from a `Read` into a temporary buffer before compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4222,"byte_end":4308,"line_start":14,"line_end":14,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4469,"byte_end":4472,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4424,"byte_end":4457,"line_start":21,"line_end":21,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4750,"byte_end":4765,"line_start":30,"line_end":30,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Compressor>::with_dictionary","value":"fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4560,"byte_end":4622,"line_start":26,"line_end":26,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4627,"byte_end":4630,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4635,"byte_end":4709,"line_start":28,"line_end":28,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4714,"byte_end":4738,"line_start":29,"line_end":29,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5273,"byte_end":5297,"line_start":46,"line_end":46,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Compressor>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(&'a crate::dict::EncoderDictionary)\n-> io::Result<Self> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compressor using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new compressor using an existing `EncoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4984,"byte_end":5051,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5056,"byte_end":5059,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ The compression level will be the one specified when creating the dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5064,"byte_end":5145,"line_start":42,"line_end":42,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5150,"byte_end":5153,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5158,"byte_end":5232,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5237,"byte_end":5261,"line_start":45,"line_end":45,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5858,"byte_end":5879,"line_start":65,"line_end":65,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<Compressor>::set_compression_level","value":"fn set_compression_level(&mut Self, i32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the compression level used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the compression level used by this compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5560,"byte_end":5618,"line_start":59,"line_end":59,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5623,"byte_end":5626,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ *This will clear any dictionary previously registered.*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5631,"byte_end":5690,"line_start":61,"line_end":61,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5695,"byte_end":5698,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ If you want to keep the existing dictionary, you will need to pass it again to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5703,"byte_end":5785,"line_start":63,"line_end":63,"column_start":5,"column_end":87}},{"value":"/ `Self::set_dictionary` instead of using this method.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5790,"byte_end":5846,"line_start":64,"line_end":64,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6228,"byte_end":6242,"line_start":75,"line_end":75,"column_start":12,"column_end":26},"name":"set_dictionary","qualname":"<Compressor>::set_dictionary","value":"fn set_dictionary(&mut Self, i32, &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary and compression level used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary and compression level used by this compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":5974,"byte_end":6047,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6052,"byte_end":6055,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Will affect future compression jobs.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6060,"byte_end":6100,"line_start":71,"line_end":71,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6105,"byte_end":6108,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6113,"byte_end":6187,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6192,"byte_end":6216,"line_start":74,"line_end":74,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6866,"byte_end":6889,"line_start":97,"line_end":97,"column_start":12,"column_end":35},"name":"set_prepared_dictionary","qualname":"<Compressor>::set_prepared_dictionary","value":"fn set_prepared_dictionary<'b>(&mut Self, &'a crate::dict::EncoderDictionary)\n-> io::Result<()> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this compressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6600,"byte_end":6651,"line_start":91,"line_end":91,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6656,"byte_end":6659,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The compression level used when preparing the dictionary will be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6664,"byte_end":6738,"line_start":93,"line_end":93,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6743,"byte_end":6746,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that decompression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6751,"byte_end":6825,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":6830,"byte_end":6854,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7462,"byte_end":7480,"line_start":117,"line_end":117,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"fn compress_to_buffer<C>(&mut Self, &[u8], &mut C) -> io::Result<usize> where\nC: zstd_safe::WriteBuf + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7163,"byte_end":7231,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7236,"byte_end":7239,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7244,"byte_end":7318,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7323,"byte_end":7382,"line_start":114,"line_end":114,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7387,"byte_end":7390,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7395,"byte_end":7450,"line_start":116,"line_end":116,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7873,"byte_end":7881,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"fn compress(&mut Self, &[u8]) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7728,"byte_end":7793,"line_start":127,"line_end":127,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7798,"byte_end":7801,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":7806,"byte_end":7861,"line_start":129,"line_end":129,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":8346,"byte_end":8357,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"context_mut","qualname":"<Compressor>::context_mut","value":"fn context_mut(&mut Self) -> &mut zstd_safe::CCtx","parent":null,"children":[],"decl_id":null,"docs":" Gives mutable access to the internal context.\n","sig":null,"attributes":[{"value":"/ Gives mutable access to the internal context.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":8285,"byte_end":8334,"line_start":141,"line_end":141,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":8501,"byte_end":8514,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Compressor>::set_parameter","value":"fn set_parameter(&mut Self, zstd_safe::CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this compressor.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this compressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":8436,"byte_end":8489,"line_start":146,"line_end":146,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9156,"byte_end":9168,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::bulk::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":608}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":8979,"byte_end":9042,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9043,"byte_end":9046,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9047,"byte_end":9125,"line_start":10,"line_end":10,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9293,"byte_end":9296,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9245,"byte_end":9281,"line_start":17,"line_end":17,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9443,"byte_end":9458,"line_start":23,"line_end":23,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decompressor>::with_dictionary","value":"fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9367,"byte_end":9431,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9861,"byte_end":9885,"line_start":37,"line_end":37,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decompressor>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(&'a crate::dict::DecoderDictionary)\n-> io::Result<Self> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decompressor using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decompressor using an existing `DecoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9666,"byte_end":9735,"line_start":33,"line_end":33,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9740,"byte_end":9743,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9748,"byte_end":9820,"line_start":35,"line_end":35,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9825,"byte_end":9849,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10386,"byte_end":10400,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"set_dictionary","qualname":"<Decompressor>::set_dictionary","value":"fn set_dictionary(&mut Self, &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this decompressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this decompressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10154,"byte_end":10207,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10212,"byte_end":10215,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Will affect future compression jobs.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10220,"byte_end":10260,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10265,"byte_end":10268,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10273,"byte_end":10345,"line_start":54,"line_end":54,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10350,"byte_end":10374,"line_start":55,"line_end":55,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10758,"byte_end":10781,"line_start":68,"line_end":68,"column_start":12,"column_end":35},"name":"set_prepared_dictionary","qualname":"<Decompressor>::set_prepared_dictionary","value":"fn set_prepared_dictionary<'b>(&mut Self, &'a crate::dict::DecoderDictionary)\n-> io::Result<()> where 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Changes the dictionary used by this decompressor.","sig":null,"attributes":[{"value":"/ Changes the dictionary used by this decompressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10579,"byte_end":10632,"line_start":64,"line_end":64,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10637,"byte_end":10640,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Note that using a dictionary means that compression will need to use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10645,"byte_end":10717,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ the same dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":10722,"byte_end":10746,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11287,"byte_end":11307,"line_start":86,"line_end":86,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"fn decompress_to_buffer<C>(&mut Self, &[u8], &mut C) -> io::Result<usize>\nwhere C: zstd_safe::WriteBuf + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11055,"byte_end":11124,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11129,"byte_end":11132,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11137,"byte_end":11211,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11216,"byte_end":11275,"line_start":85,"line_end":85,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11751,"byte_end":11761,"line_start":100,"line_end":100,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11556,"byte_end":11625,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11630,"byte_end":11633,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11638,"byte_end":11701,"line_start":98,"line_end":98,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":11706,"byte_end":11739,"line_start":99,"line_end":99,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12162,"byte_end":12175,"line_start":113,"line_end":113,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decompressor>::set_parameter","value":"fn set_parameter(&mut Self, zstd_safe::DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decompressor.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decompressor.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12093,"byte_end":12150,"line_start":112,"line_end":112,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12925,"byte_end":12936,"line_start":134,"line_end":134,"column_start":12,"column_end":23},"name":"upper_bound","qualname":"<Decompressor>::upper_bound","value":"fn upper_bound(&[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get an upper bound on the decompressed size of data, if available","sig":null,"attributes":[{"value":"/ Get an upper bound on the decompressed size of data, if available","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12423,"byte_end":12492,"line_start":125,"line_end":125,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12497,"byte_end":12500,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This can be used to pre-allocate enough capacity for `decompress_to_buffer`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12505,"byte_end":12584,"line_start":127,"line_end":127,"column_start":5,"column_end":84}},{"value":"/ and is used by `decompress` to ensure that it does not over-allocate if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12589,"byte_end":12664,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ you supply a large `capacity`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12669,"byte_end":12703,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12708,"byte_end":12711,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the upper bound cannot be determined or is larger than `usize::MAX`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12716,"byte_end":12809,"line_start":131,"line_end":131,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12814,"byte_end":12817,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ Note that unless the `experimental` feature is enabled, this will always return `None`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":12822,"byte_end":12913,"line_start":133,"line_end":133,"column_start":5,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2629,"byte_end":2647,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::bulk::compress_to_buffer","value":"fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2352,"byte_end":2422,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2423,"byte_end":2426,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2427,"byte_end":2501,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2502,"byte_end":2561,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2562,"byte_end":2565,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2566,"byte_end":2621,"line_start":23,"line_end":23,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2941,"byte_end":2949,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"compress","qualname":"::bulk::compress","value":"fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2808,"byte_end":2873,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2874,"byte_end":2877,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":2878,"byte_end":2933,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3262,"byte_end":3282,"line_start":43,"line_end":43,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::bulk::decompress_to_buffer","value":"fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3046,"byte_end":3115,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3116,"byte_end":3119,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3120,"byte_end":3194,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3195,"byte_end":3254,"line_start":42,"line_end":42,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3605,"byte_end":3615,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"decompress","qualname":"::bulk::decompress","value":"fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3426,"byte_end":3495,"line_start":50,"line_end":50,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3496,"byte_end":3499,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3500,"byte_end":3563,"line_start":52,"line_end":52,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/mod.rs","byte_start":3564,"byte_end":3597,"line_start":53,"line_end":53,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":112},{"krate":0,"index":116}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13326,"byte_end":13370,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13371,"byte_end":13374,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13375,"byte_end":13440,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13441,"byte_end":13497,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13498,"byte_end":13553,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13554,"byte_end":13557,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13558,"byte_end":13611,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13612,"byte_end":13676,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13677,"byte_end":13747,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13748,"byte_end":13792,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13793,"byte_end":13796,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13797,"byte_end":13874,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13875,"byte_end":13878,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13879,"byte_end":13958,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":13959,"byte_end":14038,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":92},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14347,"byte_end":14364,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":94}],"decl_id":null,"docs":" Prepared dictionary for compression","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14138,"byte_end":14177,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14178,"byte_end":14181,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ A dictionary can include its own copy of the data (if it is `'static`), or it can merely point","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14182,"byte_end":14280,"line_start":24,"line_end":24,"column_start":1,"column_end":99}},{"value":"/ to a separate buffer (if it has another lifetime).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14281,"byte_end":14335,"line_start":25,"line_end":25,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14554,"byte_end":14558,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"copy","qualname":"<EncoderDictionary>::copy","value":"fn copy(&[u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a prepared dictionary for compression.","sig":null,"attributes":[{"value":"/ Creates a prepared dictionary for compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14434,"byte_end":14484,"line_start":31,"line_end":31,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14489,"byte_end":14492,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14497,"byte_end":14542,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15292,"byte_end":15300,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15235,"byte_end":15280,"line_start":55,"line_end":55,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15406,"byte_end":15423,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15353,"byte_end":15394,"line_start":61,"line_end":61,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15614,"byte_end":15618,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"copy","qualname":"<DecoderDictionary>::copy","value":"fn copy(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a prepared dictionary for decompression.","sig":null,"attributes":[{"value":"/ Create a prepared dictionary for decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15493,"byte_end":15544,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15549,"byte_end":15552,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15557,"byte_end":15602,"line_start":69,"line_end":69,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16237,"byte_end":16245,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16180,"byte_end":16225,"line_start":89,"line_end":89,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":108},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16575,"byte_end":16590,"line_start":101,"line_end":101,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16298,"byte_end":16357,"line_start":95,"line_end":95,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16358,"byte_end":16361,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16362,"byte_end":16419,"line_start":97,"line_end":97,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16420,"byte_end":16463,"line_start":98,"line_end":98,"column_start":1,"column_end":44}},{"value":"cfg(feature = \"zdict_builder\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":16464,"byte_end":16497,"line_start":99,"line_end":99,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17618,"byte_end":17630,"line_start":133,"line_end":133,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"fn from_samples<S>(&[S], usize) -> io::Result<Vec<u8>> where S: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17171,"byte_end":17216,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17217,"byte_end":17220,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17221,"byte_end":17292,"line_start":124,"line_end":124,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17293,"byte_end":17343,"line_start":125,"line_end":125,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17344,"byte_end":17347,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17348,"byte_end":17396,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17397,"byte_end":17451,"line_start":128,"line_end":128,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17452,"byte_end":17455,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17456,"byte_end":17506,"line_start":130,"line_end":130,"column_start":1,"column_end":51}},{"value":"cfg(feature = \"zdict_builder\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17507,"byte_end":17540,"line_start":131,"line_end":131,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":18131,"byte_end":18141,"line_start":148,"line_end":148,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<std::path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":17981,"byte_end":18019,"line_start":145,"line_end":145,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"zdict_builder\")","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":18020,"byte_end":18053,"line_start":146,"line_end":146,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":122},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":207},{"krate":0,"index":333},{"krate":0,"index":354},{"krate":0,"index":461},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":744,"byte_end":756,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20000,"byte_end":20041,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20042,"byte_end":20045,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20046,"byte_end":20112,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20113,"byte_end":20171,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20172,"byte_end":20175,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20176,"byte_end":20254,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20255,"byte_end":20273,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":123},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":158},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":198},{"krate":0,"index":201}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27395,"byte_end":27474,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":154},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27827,"byte_end":27834,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":157}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27652,"byte_end":27713,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27714,"byte_end":27717,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27718,"byte_end":27769,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27770,"byte_end":27815,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27974,"byte_end":27981,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":161}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":27902,"byte_end":27962,"line_start":19,"line_end":19,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28138,"byte_end":28141,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28100,"byte_end":28126,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28412,"byte_end":28423,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder>::with_buffer","value":"fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28355,"byte_end":28400,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28662,"byte_end":28677,"line_start":41,"line_end":41,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28510,"byte_end":28566,"line_start":38,"line_end":38,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28571,"byte_end":28574,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28579,"byte_end":28650,"line_start":40,"line_end":40,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29096,"byte_end":29108,"line_start":53,"line_end":53,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder>::single_frame","value":"fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28934,"byte_end":28988,"line_start":49,"line_end":49,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28993,"byte_end":28996,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29001,"byte_end":29068,"line_start":51,"line_end":51,"column_start":5,"column_end":72}},{"value":"must_use","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29073,"byte_end":29084,"line_start":52,"line_end":52,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29354,"byte_end":29378,"line_start":61,"line_end":61,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(R, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29193,"byte_end":29258,"line_start":58,"line_end":58,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29263,"byte_end":29266,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29271,"byte_end":29342,"line_start":60,"line_end":60,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29744,"byte_end":29767,"line_start":75,"line_end":75,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder>::recommended_output_size","value":"fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29679,"byte_end":29732,"line_start":74,"line_end":74,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29889,"byte_end":29896,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29828,"byte_end":29877,"line_start":79,"line_end":79,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30152,"byte_end":30159,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":29952,"byte_end":30009,"line_start":84,"line_end":84,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30014,"byte_end":30017,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30022,"byte_end":30094,"line_start":86,"line_end":86,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30099,"byte_end":30140,"line_start":87,"line_end":87,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30401,"byte_end":30407,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder>::finish","value":"fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30227,"byte_end":30255,"line_start":92,"line_end":92,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30260,"byte_end":30263,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30268,"byte_end":30333,"line_start":94,"line_end":94,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30338,"byte_end":30389,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30550,"byte_end":30554,"line_start":104,"line_end":104,"column_start":8,"column_end":12},"name":"read","qualname":"<Decoder as std::io::Read>::read","value":"fn read(&mut Self, &mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4512},"children":[],"decl_id":{"krate":1,"index":4513},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30733,"byte_end":30736,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30695,"byte_end":30721,"line_start":110,"line_end":110,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31026,"byte_end":31037,"line_start":120,"line_end":120,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder>::with_buffer","value":"fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30969,"byte_end":31014,"line_start":119,"line_end":119,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31296,"byte_end":31311,"line_start":127,"line_end":127,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31144,"byte_end":31200,"line_start":124,"line_end":124,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31205,"byte_end":31208,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31213,"byte_end":31284,"line_start":126,"line_end":126,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31780,"byte_end":31804,"line_start":143,"line_end":143,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(R, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31619,"byte_end":31684,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31689,"byte_end":31692,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31697,"byte_end":31768,"line_start":142,"line_end":142,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32170,"byte_end":32193,"line_start":157,"line_end":157,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder>::recommended_output_size","value":"fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32105,"byte_end":32158,"line_start":156,"line_end":156,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32315,"byte_end":32322,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32254,"byte_end":32303,"line_start":161,"line_end":161,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32578,"byte_end":32585,"line_start":170,"line_end":170,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32378,"byte_end":32435,"line_start":166,"line_end":166,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32440,"byte_end":32443,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32448,"byte_end":32520,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32525,"byte_end":32566,"line_start":169,"line_end":169,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32827,"byte_end":32833,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32653,"byte_end":32681,"line_start":174,"line_end":174,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32686,"byte_end":32689,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32694,"byte_end":32759,"line_start":176,"line_end":176,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32764,"byte_end":32815,"line_start":177,"line_end":177,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32976,"byte_end":32980,"line_start":186,"line_end":186,"column_start":8,"column_end":12},"name":"read","qualname":"<Encoder as std::io::Read>::read","value":"fn read(&mut Self, &mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4512},"children":[],"decl_id":{"krate":1,"index":4513},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":207},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":240},{"krate":0,"index":246},{"krate":0,"index":252},{"krate":0,"index":259},{"krate":0,"index":263},{"krate":0,"index":268},{"krate":0,"index":275},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":288},{"krate":0,"index":304},{"krate":0,"index":309},{"krate":0,"index":313},{"krate":0,"index":326},{"krate":0,"index":330}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33277,"byte_end":33357,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":232},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34066,"byte_end":34073,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":235}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33517,"byte_end":33581,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33582,"byte_end":33585,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33586,"byte_end":33630,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33631,"byte_end":33676,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33677,"byte_end":33680,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33681,"byte_end":33738,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33739,"byte_end":33742,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can call [`auto_finish()`] to use an","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33743,"byte_end":33802,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"/ [`AutoFinishEncoder`] that will finish on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33803,"byte_end":33854,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33855,"byte_end":33858,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33859,"byte_end":33929,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33930,"byte_end":33933,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33934,"byte_end":33966,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/ [`auto_finish()`]: #method.auto_finish","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":33967,"byte_end":34009,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ [`AutoFinishEncoder`]: AutoFinishEncoder","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34010,"byte_end":34054,"line_start":26,"line_end":26,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34461,"byte_end":34468,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":239}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34178,"byte_end":34243,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34244,"byte_end":34247,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Note that you probably want to `flush()` after writing your stream content.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34248,"byte_end":34327,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ You can use [`auto_flush()`] to automatically flush the writer on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34328,"byte_end":34403,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34404,"byte_end":34407,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34408,"byte_end":34449,"line_start":37,"line_end":37,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34810,"byte_end":34827,"line_start":49,"line_end":49,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":245}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34575,"byte_end":34645,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34646,"byte_end":34649,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_finish()`] method on the [`Encoder`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34650,"byte_end":34725,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34726,"byte_end":34729,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [`auto_finish()`]: Encoder::auto_finish","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34730,"byte_end":34773,"line_start":47,"line_end":47,"column_start":1,"column_end":44}},{"value":"/ [`Encoder`]: Encoder","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":34774,"byte_end":34798,"line_start":48,"line_end":48,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35277,"byte_end":35293,"line_start":66,"line_end":66,"column_start":12,"column_end":28},"name":"AutoFlushDecoder","qualname":"::stream::write::AutoFlushDecoder","value":"AutoFlushDecoder {  }","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"decl_id":null,"docs":" A wrapper around a `Decoder<W>` that flushes the stream on drop.","sig":null,"attributes":[{"value":"/ A wrapper around a `Decoder<W>` that flushes the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35047,"byte_end":35115,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35116,"byte_end":35119,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This can be created by the [`auto_flush()`] method on the [`Decoder`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35120,"byte_end":35194,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35195,"byte_end":35198,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`auto_flush()`]: Decoder::auto_flush","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35199,"byte_end":35240,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"/ [`Decoder`]: Decoder","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35241,"byte_end":35265,"line_start":65,"line_end":65,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35831,"byte_end":35838,"line_start":86,"line_end":86,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFlushDecoder>::get_ref","value":"fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35769,"byte_end":35819,"line_start":85,"line_end":85,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36165,"byte_end":36172,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFlushDecoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35914,"byte_end":35972,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35977,"byte_end":35980,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35985,"byte_end":36057,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36062,"byte_end":36103,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36108,"byte_end":36111,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36116,"byte_end":36153,"line_start":95,"line_end":95,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36360,"byte_end":36364,"line_start":106,"line_end":106,"column_start":8,"column_end":12},"name":"drop","qualname":"<AutoFlushDecoder as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36669,"byte_end":36674,"line_start":116,"line_end":116,"column_start":8,"column_end":13},"name":"write","qualname":"<AutoFlushDecoder as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> io::Result<usize>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4570},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36785,"byte_end":36790,"line_start":120,"line_end":120,"column_start":8,"column_end":13},"name":"flush","qualname":"<AutoFlushDecoder as std::io::Write>::flush","value":"fn flush(&mut Self) -> io::Result<()>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37199,"byte_end":37206,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder>::get_ref","value":"fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37137,"byte_end":37187,"line_start":133,"line_end":133,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37533,"byte_end":37540,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37282,"byte_end":37340,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37345,"byte_end":37348,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37353,"byte_end":37425,"line_start":140,"line_end":140,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37430,"byte_end":37471,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37476,"byte_end":37479,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Mostly used for testing purposes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37484,"byte_end":37521,"line_start":143,"line_end":143,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37708,"byte_end":37712,"line_start":150,"line_end":150,"column_start":8,"column_end":12},"name":"drop","qualname":"<AutoFinishEncoder as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37984,"byte_end":37989,"line_start":159,"line_end":159,"column_start":8,"column_end":13},"name":"write","qualname":"<AutoFinishEncoder as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> io::Result<usize>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4570},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38100,"byte_end":38105,"line_start":163,"line_end":163,"column_start":8,"column_end":13},"name":"flush","qualname":"<AutoFinishEncoder as std::io::Write>::flush","value":"fn flush(&mut Self) -> io::Result<()>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38391,"byte_end":38394,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38234,"byte_end":38260,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38265,"byte_end":38268,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38273,"byte_end":38311,"line_start":171,"line_end":171,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38316,"byte_end":38319,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38324,"byte_end":38379,"line_start":173,"line_end":173,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38778,"byte_end":38793,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38501,"byte_end":38557,"line_start":178,"line_end":178,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38562,"byte_end":38565,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38570,"byte_end":38625,"line_start":180,"line_end":180,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38630,"byte_end":38698,"line_start":181,"line_end":181,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38703,"byte_end":38706,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38711,"byte_end":38766,"line_start":183,"line_end":183,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39325,"byte_end":39349,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(W, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39098,"byte_end":39172,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39177,"byte_end":39180,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39185,"byte_end":39240,"line_start":198,"line_end":198,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39245,"byte_end":39313,"line_start":199,"line_end":199,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39835,"byte_end":39846,"line_start":217,"line_end":217,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder>::auto_finish","value":"fn auto_finish(Self) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39649,"byte_end":39721,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39726,"byte_end":39729,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39734,"byte_end":39745,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39750,"byte_end":39753,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39758,"byte_end":39823,"line_start":216,"line_end":216,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40123,"byte_end":40132,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder>::on_finish","value":"fn on_finish<F>(Self, F) -> AutoFinishEncoder where F: FnMut(io::Result<W>) ->\n()","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39978,"byte_end":40037,"line_start":223,"line_end":223,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40042,"byte_end":40045,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40050,"byte_end":40111,"line_start":225,"line_end":225,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40339,"byte_end":40346,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40277,"byte_end":40327,"line_start":233,"line_end":233,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40603,"byte_end":40610,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40402,"byte_end":40460,"line_start":238,"line_end":238,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40465,"byte_end":40468,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40473,"byte_end":40545,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40550,"byte_end":40591,"line_start":241,"line_end":241,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41234,"byte_end":41240,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40678,"byte_end":40716,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40721,"byte_end":40724,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40729,"byte_end":40802,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40807,"byte_end":40872,"line_start":249,"line_end":249,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40877,"byte_end":40880,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40885,"byte_end":40939,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40944,"byte_end":40947,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":40952,"byte_end":41019,"line_start":253,"line_end":253,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41024,"byte_end":41027,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41032,"byte_end":41105,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41110,"byte_end":41183,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41188,"byte_end":41222,"line_start":257,"line_end":257,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41773,"byte_end":41783,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder>::try_finish","value":"fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41327,"byte_end":41375,"line_start":262,"line_end":262,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41380,"byte_end":41383,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41388,"byte_end":41461,"line_start":264,"line_end":264,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41466,"byte_end":41523,"line_start":265,"line_end":265,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41528,"byte_end":41531,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41536,"byte_end":41606,"line_start":267,"line_end":267,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41611,"byte_end":41649,"line_start":268,"line_end":268,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41654,"byte_end":41657,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41662,"byte_end":41735,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":41740,"byte_end":41761,"line_start":271,"line_end":271,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42221,"byte_end":42230,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder>::do_finish","value":"fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42028,"byte_end":42061,"line_start":280,"line_end":280,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42066,"byte_end":42069,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42074,"byte_end":42147,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42152,"byte_end":42209,"line_start":283,"line_end":283,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42380,"byte_end":42402,"line_start":289,"line_end":289,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder>::recommended_input_size","value":"fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42302,"byte_end":42368,"line_start":288,"line_end":288,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42550,"byte_end":42555,"line_start":297,"line_end":297,"column_start":8,"column_end":13},"name":"write","qualname":"<Encoder as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> io::Result<usize>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4570},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42647,"byte_end":42652,"line_start":301,"line_end":301,"column_start":8,"column_end":13},"name":"flush","qualname":"<Encoder as std::io::Write>::flush","value":"fn flush(&mut Self) -> io::Result<()>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42800,"byte_end":42803,"line_start":308,"line_end":308,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42762,"byte_end":42788,"line_start":307,"line_end":307,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43100,"byte_end":43115,"line_start":316,"line_end":316,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42891,"byte_end":42947,"line_start":312,"line_end":312,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42952,"byte_end":42955,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42960,"byte_end":43015,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43020,"byte_end":43088,"line_start":315,"line_end":315,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43597,"byte_end":43621,"line_start":328,"line_end":328,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(W, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43370,"byte_end":43444,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43449,"byte_end":43452,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43457,"byte_end":43512,"line_start":326,"line_end":326,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43517,"byte_end":43585,"line_start":327,"line_end":327,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43983,"byte_end":43990,"line_start":341,"line_end":341,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43921,"byte_end":43971,"line_start":340,"line_end":340,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44247,"byte_end":44254,"line_start":349,"line_end":349,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44046,"byte_end":44104,"line_start":345,"line_end":345,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44109,"byte_end":44112,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44117,"byte_end":44189,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44194,"byte_end":44235,"line_start":348,"line_end":348,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44364,"byte_end":44374,"line_start":354,"line_end":354,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder>::into_inner","value":"fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44322,"byte_end":44352,"line_start":353,"line_end":353,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44512,"byte_end":44534,"line_start":359,"line_end":359,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder>::recommended_input_size","value":"fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44434,"byte_end":44500,"line_start":358,"line_end":358,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44778,"byte_end":44788,"line_start":368,"line_end":368,"column_start":12,"column_end":22},"name":"auto_flush","qualname":"<Decoder>::auto_flush","value":"fn auto_flush(Self) -> AutoFlushDecoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will flush the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44594,"byte_end":44665,"line_start":363,"line_end":363,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44670,"byte_end":44673,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44678,"byte_end":44689,"line_start":365,"line_end":365,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44694,"byte_end":44697,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when flushing the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44702,"byte_end":44766,"line_start":367,"line_end":367,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":45060,"byte_end":45068,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"on_flush","qualname":"<Decoder>::on_flush","value":"fn on_flush<F>(Self, F) -> AutoFlushDecoder where F: FnMut(io::Result<()>) ->\n()","parent":null,"children":[],"decl_id":null,"docs":" Returns a decoder that will flush the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a decoder that will flush the stream on drop.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44918,"byte_end":44975,"line_start":374,"line_end":374,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44980,"byte_end":44983,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `flush()`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":44988,"byte_end":45048,"line_start":376,"line_end":376,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":45296,"byte_end":45301,"line_start":388,"line_end":388,"column_start":8,"column_end":13},"name":"write","qualname":"<Decoder as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> io::Result<usize>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4570},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":45393,"byte_end":45398,"line_start":392,"line_end":392,"column_start":8,"column_end":13},"name":"flush","qualname":"<Decoder as std::io::Write>::flush","value":"fn flush(&mut Self) -> io::Result<()>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4574},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":344},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":45930,"byte_end":45940,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"fn decode_all<R>(R) -> io::Result<Vec<u8>> where R: io::Read","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":45804,"byte_end":45865,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":45866,"byte_end":45869,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":45870,"byte_end":45922,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":346},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46210,"byte_end":46221,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read, W: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46080,"byte_end":46141,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46142,"byte_end":46145,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46146,"byte_end":46202,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":349},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46612,"byte_end":46622,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"fn encode_all<R>(R, i32) -> io::Result<Vec<u8>> where R: io::Read","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46426,"byte_end":46495,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46496,"byte_end":46499,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46500,"byte_end":46544,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46545,"byte_end":46548,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46549,"byte_end":46604,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":351},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46983,"byte_end":46994,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46787,"byte_end":46856,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46857,"byte_end":46860,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46861,"byte_end":46915,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46916,"byte_end":46919,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/functions.rs","byte_start":46920,"byte_end":46975,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":354},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/mod.rs","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":406},{"krate":0,"index":455},{"krate":0,"index":458}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/mod.rs","byte_start":47284,"byte_end":47357,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47840,"byte_end":47846,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47573,"byte_end":47629,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47630,"byte_end":47633,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47634,"byte_end":47711,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47712,"byte_end":47715,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47716,"byte_end":47790,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":47791,"byte_end":47828,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48326,"byte_end":48329,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48205,"byte_end":48232,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48237,"byte_end":48240,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48245,"byte_end":48314,"line_start":34,"line_end":34,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48615,"byte_end":48631,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48549,"byte_end":48603,"line_start":45,"line_end":45,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48762,"byte_end":48775,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48690,"byte_end":48750,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48907,"byte_end":48917,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48838,"byte_end":48895,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49038,"byte_end":49044,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48977,"byte_end":49026,"line_start":60,"line_end":60,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49133,"byte_end":49143,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49092,"byte_end":49121,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49878,"byte_end":49882,"line_start":100,"line_end":100,"column_start":8,"column_end":12},"name":"read","qualname":"<Reader<R, D> as std::io::Read>::read","value":"fn read(&mut Self, &mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4512},"children":[],"decl_id":{"krate":1,"index":4513},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":424},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55072,"byte_end":55078,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":54805,"byte_end":54862,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":54863,"byte_end":54866,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":54867,"byte_end":54945,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":54946,"byte_end":54949,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":54950,"byte_end":55027,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55028,"byte_end":55060,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55523,"byte_end":55526,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55401,"byte_end":55428,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55433,"byte_end":55436,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55441,"byte_end":55511,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":56169,"byte_end":56175,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55835,"byte_end":55855,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55860,"byte_end":55863,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55868,"byte_end":55939,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55944,"byte_end":55955,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55960,"byte_end":55963,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55968,"byte_end":56042,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":56047,"byte_end":56072,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":56077,"byte_end":56080,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":56085,"byte_end":56157,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58808,"byte_end":58818,"line_start":134,"line_end":134,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58631,"byte_end":58679,"line_start":130,"line_end":130,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58684,"byte_end":58687,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58692,"byte_end":58762,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58767,"byte_end":58796,"line_start":133,"line_end":133,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58940,"byte_end":58946,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58886,"byte_end":58928,"line_start":138,"line_end":138,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59056,"byte_end":59066,"line_start":144,"line_end":144,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":58994,"byte_end":59044,"line_start":143,"line_end":143,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59183,"byte_end":59192,"line_start":149,"line_end":149,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59126,"byte_end":59171,"line_start":148,"line_end":148,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59308,"byte_end":59321,"line_start":154,"line_end":154,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59243,"byte_end":59296,"line_start":153,"line_end":153,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59764,"byte_end":59769,"line_start":176,"line_end":176,"column_start":8,"column_end":13},"name":"write","qualname":"<Writer<W, D> as std::io::Write>::write","value":"fn write(&mut Self, &[u8]) -> io::Result<usize>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4570},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":61209,"byte_end":61214,"line_start":217,"line_end":217,"column_start":8,"column_end":13},"name":"flush","qualname":"<Writer<W, D> as std::io::Write>::flush","value":"fn flush(&mut Self) -> io::Result<()>","parent":{"krate":1,"index":4569},"children":[],"decl_id":{"krate":1,"index":4574},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":461},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":538}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63187,"byte_end":63238,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63239,"byte_end":63242,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63243,"byte_end":63320,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63321,"byte_end":63347,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63348,"byte_end":63351,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63352,"byte_end":63419,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":491},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63726,"byte_end":63735,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":498}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63596,"byte_end":63659,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63660,"byte_end":63663,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63664,"byte_end":63715,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63955,"byte_end":63958,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"fn run<C>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>) -> io::Result<usize>\nwhere C: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63742,"byte_end":63787,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63792,"byte_end":63795,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63800,"byte_end":63849,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63854,"byte_end":63857,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63862,"byte_end":63929,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":63934,"byte_end":63947,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64293,"byte_end":64307,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64107,"byte_end":64152,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64157,"byte_end":64160,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64165,"byte_end":64235,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64240,"byte_end":64285,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64892,"byte_end":64897,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"fn flush<C>(&mut Self, &mut OutBuffer<, C>) -> io::Result<usize> where\nC: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64713,"byte_end":64753,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64758,"byte_end":64761,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64766,"byte_end":64818,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":64823,"byte_end":64884,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65181,"byte_end":65187,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65057,"byte_end":65100,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65105,"byte_end":65108,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65113,"byte_end":65173,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65486,"byte_end":65492,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"fn finish<C>(&mut Self, &mut OutBuffer<, C>, bool) -> io::Result<usize> where\nC: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65245,"byte_end":65305,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65310,"byte_end":65313,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65318,"byte_end":65365,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65370,"byte_end":65373,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65378,"byte_end":65432,"line_start":74,"line_end":74,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65437,"byte_end":65478,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65785,"byte_end":65789,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65712,"byte_end":65773,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65825,"byte_end":65828,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"run","qualname":"<NoOp as stream::raw::Operation>::run","value":"fn run<C>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>) -> io::Result<usize>\nwhere C: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":492},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66725,"byte_end":66731,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66672,"byte_end":66713,"line_start":116,"line_end":116,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":506},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66828,"byte_end":66837,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":505},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66738,"byte_end":66782,"line_start":118,"line_end":118,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66787,"byte_end":66790,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66795,"byte_end":66819,"line_start":120,"line_end":120,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":507},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66900,"byte_end":66910,"line_start":124,"line_end":124,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":505},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66851,"byte_end":66891,"line_start":123,"line_end":123,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":508},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66975,"byte_end":66988,"line_start":127,"line_end":127,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":505},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":66924,"byte_end":66966,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":509},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67057,"byte_end":67064,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":511}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67000,"byte_end":67045,"line_start":130,"line_end":130,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67174,"byte_end":67177,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67136,"byte_end":67162,"line_start":136,"line_end":136,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67324,"byte_end":67339,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67248,"byte_end":67312,"line_start":141,"line_end":141,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67699,"byte_end":67723,"line_start":154,"line_end":154,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(&DecoderDictionary) -> io::Result<Self> where\n'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67622,"byte_end":67687,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68092,"byte_end":68105,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68028,"byte_end":68080,"line_start":167,"line_end":167,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68322,"byte_end":68325,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"run","qualname":"<Decoder as stream::raw::Operation>::run","value":"fn run<C>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>) -> io::Result<usize>\nwhere C: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":492},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68588,"byte_end":68594,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"reinit","qualname":"<Decoder as stream::raw::Operation>::reinit","value":"fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":497},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68710,"byte_end":68716,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"finish","qualname":"<Decoder as stream::raw::Operation>::finish","value":"fn finish<C>(&mut Self, &mut OutBuffer<, C>, bool) -> io::Result<usize> where\nC: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":498},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":526},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69126,"byte_end":69133,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":528}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69069,"byte_end":69114,"line_start":208,"line_end":208,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69243,"byte_end":69246,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69205,"byte_end":69231,"line_start":214,"line_end":214,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69410,"byte_end":69425,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69334,"byte_end":69398,"line_start":219,"line_end":219,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69894,"byte_end":69918,"line_start":237,"line_end":237,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"fn with_prepared_dictionary<'b>(&EncoderDictionary) -> io::Result<Self> where\n'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69818,"byte_end":69882,"line_start":236,"line_end":236,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70285,"byte_end":70298,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70223,"byte_end":70273,"line_start":250,"line_end":250,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70703,"byte_end":70723,"line_start":264,"line_end":264,"column_start":12,"column_end":32},"name":"set_pledged_src_size","qualname":"<Encoder>::set_pledged_src_size","value":"fn set_pledged_src_size(&mut Self, u64) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of the input expected by zstd.","sig":null,"attributes":[{"value":"/ Sets the size of the input expected by zstd.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70477,"byte_end":70525,"line_start":258,"line_end":258,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70530,"byte_end":70533,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ May affect compression ratio.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70538,"byte_end":70571,"line_start":260,"line_end":260,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70576,"byte_end":70579,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ It is an error to give an incorrect size (an error _will_ be returned when closing the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70584,"byte_end":70674,"line_start":262,"line_end":262,"column_start":5,"column_end":95}},{"value":"/ stream).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70679,"byte_end":70691,"line_start":263,"line_end":263,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70981,"byte_end":70984,"line_start":276,"line_end":276,"column_start":8,"column_end":11},"name":"run","qualname":"<Encoder as stream::raw::Operation>::run","value":"fn run<C>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>) -> io::Result<usize>\nwhere C: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":492},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":71245,"byte_end":71250,"line_start":286,"line_end":286,"column_start":8,"column_end":13},"name":"flush","qualname":"<Encoder as stream::raw::Operation>::flush","value":"fn flush<C>(&mut Self, &mut OutBuffer<, C>) -> io::Result<usize> where\nC: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":495},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":71441,"byte_end":71447,"line_start":293,"line_end":293,"column_start":8,"column_end":14},"name":"finish","qualname":"<Encoder as stream::raw::Operation>::finish","value":"fn finish<C>(&mut Self, &mut OutBuffer<, C>, bool) -> io::Result<usize> where\nC: WriteBuf + ?Sized","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":498},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":71667,"byte_end":71673,"line_start":301,"line_end":301,"column_start":8,"column_end":14},"name":"reinit","qualname":"<Encoder as stream::raw::Operation>::reinit","value":"fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":491},"children":[],"decl_id":{"krate":0,"index":497},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":580},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":937,"byte_end":960,"line_start":39,"line_end":39,"column_start":8,"column_end":31},"name":"compression_level_range","qualname":"::compression_level_range","value":"fn compression_level_range()\n-> std::ops::RangeInclusive<zstd_safe::CompressionLevel>","parent":null,"children":[],"decl_id":null,"docs":" The accepted range of compression levels.\n","sig":null,"attributes":[{"value":"/ The accepted range of compression levels.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":884,"byte_end":929,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4398,"byte_end":4408,"line_start":20,"line_end":20,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4963,"byte_end":4973,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9217,"byte_end":9229,"line_start":16,"line_end":16,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9643,"byte_end":9655,"line_start":32,"line_end":32,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":612},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14401,"byte_end":14418,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14706,"byte_end":14723,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15460,"byte_end":15477,"line_start":66,"line_end":66,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15748,"byte_end":15765,"line_start":77,"line_end":77,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28063,"byte_end":28070,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28329,"byte_end":28336,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28913,"byte_end":28920,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30526,"byte_end":30533,"line_start":103,"line_end":103,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30658,"byte_end":30665,"line_start":109,"line_end":109,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30943,"byte_end":30950,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31598,"byte_end":31605,"line_start":139,"line_end":139,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32952,"byte_end":32959,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35559,"byte_end":35575,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36274,"byte_end":36290,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36633,"byte_end":36649,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36922,"byte_end":36939,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37671,"byte_end":37688,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37947,"byte_end":37964,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38208,"byte_end":38215,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39077,"byte_end":39084,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42526,"byte_end":42533,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42736,"byte_end":42743,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43349,"byte_end":43356,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":45272,"byte_end":45279,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48186,"byte_end":48192,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49816,"byte_end":49822,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55344,"byte_end":55350,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59704,"byte_end":59710,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65811,"byte_end":65815,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67113,"byte_end":67120,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67604,"byte_end":67611,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68301,"byte_end":68308,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69182,"byte_end":69189,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69800,"byte_end":69807,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70960,"byte_end":70967,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":723,"byte_end":727,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":737,"byte_end":741,"line_start":28,"line_end":28,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":77}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/lib.rs","byte_start":765,"byte_end":771,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":122}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20283,"byte_end":20287,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":123}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20297,"byte_end":20302,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":207}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20328,"byte_end":20331,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":354}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/mod.rs","byte_start":20367,"byte_end":20370,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":461}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4398,"byte_end":4408,"line_start":20,"line_end":20,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/compressor.rs","byte_start":4963,"byte_end":4973,"line_start":39,"line_end":39,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9217,"byte_end":9229,"line_start":16,"line_end":16,"column_start":6,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/bulk/decompressor.rs","byte_start":9643,"byte_end":9655,"line_start":32,"line_end":32,"column_start":10,"column_end":22},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":606},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14401,"byte_end":14418,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":14706,"byte_end":14723,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":92},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15460,"byte_end":15477,"line_start":66,"line_end":66,"column_start":6,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/dict.rs","byte_start":15748,"byte_end":15765,"line_start":77,"line_end":77,"column_start":10,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28063,"byte_end":28070,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28329,"byte_end":28336,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":28913,"byte_end":28920,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30526,"byte_end":30533,"line_start":103,"line_end":103,"column_start":27,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":4512}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30658,"byte_end":30665,"line_start":109,"line_end":109,"column_start":15,"column_end":22},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":30943,"byte_end":30950,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":31598,"byte_end":31605,"line_start":139,"line_end":139,"column_start":22,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/read/mod.rs","byte_start":32952,"byte_end":32959,"line_start":185,"line_end":185,"column_start":27,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":158},"to":{"krate":1,"index":4512}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":35559,"byte_end":35575,"line_start":77,"line_end":77,"column_start":46,"column_end":62},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":246},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36274,"byte_end":36290,"line_start":101,"line_end":101,"column_start":21,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36633,"byte_end":36649,"line_start":115,"line_end":115,"column_start":52,"column_end":68},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":246},"to":{"krate":1,"index":4569}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":36922,"byte_end":36939,"line_start":125,"line_end":125,"column_start":45,"column_end":62},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37671,"byte_end":37688,"line_start":149,"line_end":149,"column_start":50,"column_end":67},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":37947,"byte_end":37964,"line_start":158,"line_end":158,"column_start":51,"column_end":68},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":240},"to":{"krate":1,"index":4569}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":38208,"byte_end":38215,"line_start":168,"line_end":168,"column_start":16,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":39077,"byte_end":39084,"line_start":195,"line_end":195,"column_start":20,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42526,"byte_end":42533,"line_start":296,"line_end":296,"column_start":30,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":4569}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":42736,"byte_end":42743,"line_start":306,"line_end":306,"column_start":16,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":43349,"byte_end":43356,"line_start":323,"line_end":323,"column_start":20,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/write/mod.rs","byte_start":45272,"byte_end":45279,"line_start":387,"line_end":387,"column_start":26,"column_end":33},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":236},"to":{"krate":1,"index":4569}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":48186,"byte_end":48192,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/reader.rs","byte_start":49816,"byte_end":49822,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":4512}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":55344,"byte_end":55350,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/zio/writer.rs","byte_start":59704,"byte_end":59710,"line_start":171,"line_end":171,"column_start":22,"column_end":28},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":424},"to":{"krate":1,"index":4569}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":65811,"byte_end":65815,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":500},"to":{"krate":0,"index":491}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67113,"byte_end":67120,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":67604,"byte_end":67611,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":68301,"byte_end":68308,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":509},"to":{"krate":0,"index":491}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69182,"byte_end":69189,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":69800,"byte_end":69807,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.11.2+zstd.1.5.2/src/stream/raw.rs","byte_start":70960,"byte_end":70967,"line_start":275,"line_end":275,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":526},"to":{"krate":0,"index":491}}]}