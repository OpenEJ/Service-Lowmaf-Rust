{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2","program":"/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","--edition=2021","/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=3d42b65988364706","-C","extra-filename=-3d42b65988364706","--out-dir","/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","-L","dependency=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps","--extern","hashbrown=/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libhashbrown-24c8480805431d81.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/dom/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/dom/Projects/OpenEJ/Service-Lowmaf-Rust/target/rls/debug/deps/libindexmap-3d42b65988364706.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[9717016091760677484,0]},"crate_root":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src","external_crates":[{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[15846600599516386926,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3248197779922953368,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[16106073209810206859,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[705058097557950442,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[9914303954752503396,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4226859831290989395,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8113236783331938933,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17166186933304791475,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[9102879459332679527,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17334790913793278849,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15832914008974928315,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4406420180649270496,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[1969707906566880681,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[13786306822812891743,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3136484058452542816,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[4549596711944770628,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11754765901466761141,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[12231018808310572442,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12139228928510032792,0]}},{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","num":20,"id":{"name":"hashbrown","disambiguator":[17525588513902506349,0]}}],"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":92,"byte_end":5474,"line_start":2,"line_end":194,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93689,"byte_end":93702,"line_start":598,"line_end":598,"column_start":20,"column_end":33},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":83}},{"kind":"Use","ref_id":{"krate":0,"index":46},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":16773,"byte_end":16784,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":82}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17332,"byte_end":17337,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":82}},{"kind":"Use","ref_id":{"krate":0,"index":135},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17339,"byte_end":17352,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":82}},{"kind":"Use","ref_id":{"krate":0,"index":313},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17354,"byte_end":17365,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":82}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3621,"byte_end":3631,"line_start":110,"line_end":110,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3653,"byte_end":3661,"line_start":111,"line_end":111,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":928},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3683,"byte_end":3691,"line_start":112,"line_end":112,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":92,"byte_end":5474,"line_start":2,"line_end":194,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":30},{"krate":0,"index":65},{"krate":0,"index":82},{"krate":0,"index":863},{"krate":0,"index":1327},{"krate":0,"index":1330},{"krate":0,"index":1333},{"krate":0,"index":1470},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1336},{"krate":0,"index":1482},{"krate":0,"index":1488},{"krate":0,"index":1491},{"krate":0,"index":1338},{"krate":0,"index":1343},{"krate":0,"index":1355}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.56 or later.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":23},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13173,"byte_end":13183,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K>","parent":null,"children":[{"krate":0,"index":25}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":12783,"byte_end":12809,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":12810,"byte_end":12813,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":12814,"byte_end":12871,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":12872,"byte_end":12950,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":12951,"byte_end":13031,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13032,"byte_end":13076,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13077,"byte_end":13080,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13081,"byte_end":13095,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13096,"byte_end":13099,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13100,"byte_end":13162,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13271,"byte_end":13281,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":23},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13201,"byte_end":13263,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13415,"byte_end":13425,"line_start":24,"line_end":24,"column_start":8,"column_end":18},"name":"equivalent","qualname":"<Q as equivalent::Equivalent>::equivalent","value":"fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":23},"children":[],"decl_id":{"krate":0,"index":25},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13398,"byte_end":13407,"line_start":23,"line_end":23,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13577,"byte_end":13590,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":46},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14140,"byte_end":14151,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13595,"byte_end":13629,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13630,"byte_end":13633,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13634,"byte_end":13714,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13715,"byte_end":13730,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modification","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13731,"byte_end":13806,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13807,"byte_end":13859,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13860,"byte_end":13863,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erroneously, you can no longer look them up.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13864,"byte_end":13933,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":13934,"byte_end":14003,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14004,"byte_end":14066,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14067,"byte_end":14070,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14071,"byte_end":14129,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14163,"byte_end":14166,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14177,"byte_end":14182,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14254,"byte_end":14267,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"fn get_full_mut2<Q>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: ?Sized,\nQ: Hash + Equivalent<Self::Key>","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14189,"byte_end":14246,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14703,"byte_end":14710,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"fn retain2<F>(&mut Self, F) where F: FnMut(&mut Self::Key, &mut Self::Value)\n-> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14431,"byte_end":14503,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14508,"byte_end":14542,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14547,"byte_end":14550,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14555,"byte_end":14627,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14632,"byte_end":14642,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14647,"byte_end":14650,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14655,"byte_end":14695,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15002,"byte_end":15018,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":46},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14809,"byte_end":14888,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14893,"byte_end":14960,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":14965,"byte_end":14994,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15295,"byte_end":15308,"line_start":58,"line_end":58,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"<IndexMap<K, V, S> as mutable_keys::MutableKeys>::get_full_mut2","value":"fn get_full_mut2<Q>(&mut Self, &Q) -> Option<(usize, &mut K, &mut V)> where\nQ: ?Sized, Q: Hash + Equivalent<K>","parent":{"krate":0,"index":46},"children":[],"decl_id":{"krate":0,"index":49},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15475,"byte_end":15482,"line_start":65,"line_end":65,"column_start":8,"column_end":15},"name":"retain2","qualname":"<IndexMap<K, V, S> as mutable_keys::MutableKeys>::retain2","value":"fn retain2<F>(&mut Self, F) where F: FnMut(&mut K, &mut V) -> bool","parent":{"krate":0,"index":46},"children":[],"decl_id":{"krate":0,"index":51},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15608,"byte_end":15624,"line_start":72,"line_end":72,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"<IndexMap<K, V, S> as mutable_keys::MutableKeys>::__private_marker","value":"fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":46},"children":[],"decl_id":{"krate":0,"index":53},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":432},{"krate":0,"index":437},{"krate":0,"index":442},{"krate":0,"index":464},{"krate":0,"index":535},{"krate":0,"index":549},{"krate":0,"index":554},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":577},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":604},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":623},{"krate":0,"index":627},{"krate":0,"index":632},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":651},{"krate":0,"index":655},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":666},{"krate":0,"index":669},{"krate":0,"index":673},{"krate":0,"index":678},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":697},{"krate":0,"index":701},{"krate":0,"index":706},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":725},{"krate":0,"index":729},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":747},{"krate":0,"index":752},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":770},{"krate":0,"index":778},{"krate":0,"index":786},{"krate":0,"index":793},{"krate":0,"index":800},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":817},{"krate":0,"index":823},{"krate":0,"index":830},{"krate":0,"index":837},{"krate":0,"index":845},{"krate":0,"index":850},{"krate":0,"index":859}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":16601,"byte_end":16674,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":16675,"byte_end":16731,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":135},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":100988,"byte_end":101001,"line_start":108,"line_end":108,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":100716,"byte_end":100766,"line_start":102,"line_end":102,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":100767,"byte_end":100804,"line_start":103,"line_end":103,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":100805,"byte_end":100808,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":100809,"byte_end":100839,"line_start":105,"line_end":105,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101732,"byte_end":101735,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101402,"byte_end":101453,"line_start":120,"line_end":120,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101458,"byte_end":101461,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101466,"byte_end":101559,"line_start":122,"line_end":122,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101564,"byte_end":101659,"line_start":123,"line_end":123,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101664,"byte_end":101720,"line_start":124,"line_end":124,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101871,"byte_end":101874,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101806,"byte_end":101859,"line_start":129,"line_end":129,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102140,"byte_end":102147,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101947,"byte_end":102008,"line_start":134,"line_end":134,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102013,"byte_end":102016,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102021,"byte_end":102089,"line_start":136,"line_end":136,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102094,"byte_end":102128,"line_start":137,"line_end":137,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102559,"byte_end":102564,"line_start":152,"line_end":152,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102491,"byte_end":102533,"line_start":150,"line_end":150,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102538,"byte_end":102547,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102834,"byte_end":102842,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102703,"byte_end":102773,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102778,"byte_end":102822,"line_start":158,"line_end":158,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103304,"byte_end":103321,"line_start":171,"line_end":171,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":102952,"byte_end":103026,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103031,"byte_end":103034,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103039,"byte_end":103111,"line_start":166,"line_end":166,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103116,"byte_end":103179,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103184,"byte_end":103239,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103244,"byte_end":103247,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103252,"byte_end":103292,"line_start":170,"line_end":170,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103971,"byte_end":103989,"line_start":185,"line_end":185,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103625,"byte_end":103699,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103704,"byte_end":103707,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103712,"byte_end":103778,"line_start":180,"line_end":180,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103783,"byte_end":103844,"line_start":181,"line_end":181,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103849,"byte_end":103906,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103911,"byte_end":103914,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":103919,"byte_end":103959,"line_start":184,"line_end":184,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":274},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90168,"byte_end":90176,"line_start":494,"line_end":494,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90125,"byte_end":90163,"line_start":493,"line_end":493,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":276},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90177,"byte_end":90200,"line_start":494,"line_end":494,"column_start":14,"column_end":37},"name":"0","qualname":"::map::core::Entry::Occupied::0","value":"map::core::raw::OccupiedEntry<'a, K, V>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90259,"byte_end":90265,"line_start":496,"line_end":496,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":270},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90207,"byte_end":90254,"line_start":495,"line_end":495,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":279},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90266,"byte_end":90287,"line_start":496,"line_end":496,"column_start":12,"column_end":33},"name":"0","qualname":"::map::core::Entry::Vacant::0","value":"map::core::VacantEntry<'a, K, V>","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":270},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90103,"byte_end":90108,"line_start":492,"line_end":492,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"enum Entry<'a, K, V> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":277}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90013,"byte_end":90077,"line_start":490,"line_end":490,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90078,"byte_end":90093,"line_start":491,"line_end":491,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90588,"byte_end":90597,"line_start":504,"line_end":504,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90330,"byte_end":90416,"line_start":500,"line_end":500,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90421,"byte_end":90513,"line_start":501,"line_end":501,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90518,"byte_end":90521,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90526,"byte_end":90576,"line_start":503,"line_end":503,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91056,"byte_end":91070,"line_start":515,"line_end":515,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90788,"byte_end":90884,"line_start":511,"line_end":511,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90889,"byte_end":90981,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90986,"byte_end":90989,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90994,"byte_end":91044,"line_start":514,"line_end":514,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91611,"byte_end":91629,"line_start":530,"line_end":530,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91300,"byte_end":91390,"line_start":525,"line_end":525,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91395,"byte_end":91489,"line_start":526,"line_end":526,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91494,"byte_end":91536,"line_start":527,"line_end":527,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91541,"byte_end":91544,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91549,"byte_end":91599,"line_start":529,"line_end":529,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92085,"byte_end":92088,"line_start":545,"line_end":545,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":91937,"byte_end":92012,"line_start":543,"line_end":543,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92017,"byte_end":92073,"line_start":544,"line_end":544,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92340,"byte_end":92345,"line_start":553,"line_end":553,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92255,"byte_end":92328,"line_start":552,"line_end":552,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92572,"byte_end":92582,"line_start":561,"line_end":561,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92519,"byte_end":92560,"line_start":560,"line_end":560,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93094,"byte_end":93104,"line_start":578,"line_end":578,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92832,"byte_end":92922,"line_start":574,"line_end":574,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":92927,"byte_end":93019,"line_start":575,"line_end":575,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93024,"byte_end":93027,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93032,"byte_end":93082,"line_start":577,"line_end":577,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93395,"byte_end":93398,"line_start":590,"line_end":590,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Entry as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93899,"byte_end":93905,"line_start":603,"line_end":603,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93809,"byte_end":93887,"line_start":602,"line_end":602,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94148,"byte_end":94154,"line_start":610,"line_end":610,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93984,"byte_end":94070,"line_start":607,"line_end":607,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94075,"byte_end":94078,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94083,"byte_end":94136,"line_start":609,"line_end":609,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94570,"byte_end":94581,"line_start":621,"line_end":621,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94206,"byte_end":94292,"line_start":614,"line_end":614,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94297,"byte_end":94300,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94305,"byte_end":94377,"line_start":616,"line_end":616,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94382,"byte_end":94445,"line_start":617,"line_end":617,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94450,"byte_end":94505,"line_start":618,"line_end":618,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94510,"byte_end":94513,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94518,"byte_end":94558,"line_start":620,"line_end":620,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94999,"byte_end":95011,"line_start":632,"line_end":632,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94641,"byte_end":94727,"line_start":625,"line_end":625,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94732,"byte_end":94735,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94740,"byte_end":94806,"line_start":627,"line_end":627,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94811,"byte_end":94872,"line_start":628,"line_end":628,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94877,"byte_end":94934,"line_start":629,"line_end":629,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94939,"byte_end":94942,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":94947,"byte_end":94987,"line_start":631,"line_end":631,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95230,"byte_end":95242,"line_start":639,"line_end":639,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95072,"byte_end":95146,"line_start":636,"line_end":636,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95151,"byte_end":95154,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95159,"byte_end":95218,"line_start":638,"line_end":638,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95386,"byte_end":95389,"line_start":645,"line_end":645,"column_start":8,"column_end":11},"name":"fmt","qualname":"<OccupiedEntry as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":313},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95733,"byte_end":95744,"line_start":657,"line_end":657,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95601,"byte_end":95648,"line_start":653,"line_end":653,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95649,"byte_end":95686,"line_start":654,"line_end":654,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95687,"byte_end":95690,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95691,"byte_end":95721,"line_start":656,"line_end":656,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95949,"byte_end":95952,"line_start":665,"line_end":665,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95873,"byte_end":95937,"line_start":664,"line_end":664,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96066,"byte_end":96074,"line_start":670,"line_end":670,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95997,"byte_end":96054,"line_start":669,"line_end":669,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96191,"byte_end":96196,"line_start":675,"line_end":675,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96116,"byte_end":96179,"line_start":674,"line_end":674,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96376,"byte_end":96382,"line_start":681,"line_end":681,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96249,"byte_end":96342,"line_start":679,"line_end":679,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96347,"byte_end":96364,"line_start":680,"line_end":680,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96590,"byte_end":96593,"line_start":688,"line_end":688,"column_start":8,"column_end":11},"name":"fmt","qualname":"<VacantEntry as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":410},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18805,"byte_end":18813,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17369,"byte_end":17449,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17450,"byte_end":17485,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17486,"byte_end":17489,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17490,"byte_end":17567,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17568,"byte_end":17596,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17597,"byte_end":17600,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17601,"byte_end":17612,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17613,"byte_end":17616,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17617,"byte_end":17686,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17687,"byte_end":17761,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17762,"byte_end":17817,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17818,"byte_end":17821,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17822,"byte_end":17872,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17873,"byte_end":17876,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17877,"byte_end":17951,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":17952,"byte_end":18028,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18029,"byte_end":18094,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18095,"byte_end":18098,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18099,"byte_end":18112,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18113,"byte_end":18116,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18117,"byte_end":18192,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18193,"byte_end":18268,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18269,"byte_end":18348,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18349,"byte_end":18359,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18360,"byte_end":18363,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18364,"byte_end":18378,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18379,"byte_end":18382,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18383,"byte_end":18390,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18391,"byte_end":18418,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18419,"byte_end":18422,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18423,"byte_end":18479,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18480,"byte_end":18518,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18519,"byte_end":18570,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18571,"byte_end":18616,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18617,"byte_end":18622,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18623,"byte_end":18626,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18627,"byte_end":18660,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18661,"byte_end":18694,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18695,"byte_end":18728,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18729,"byte_end":18769,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18770,"byte_end":18777,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":18778,"byte_end":18793,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19119,"byte_end":19124,"line_start":87,"line_end":87,"column_start":8,"column_end":13},"name":"clone","qualname":"<IndexMap<K, V, S> as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19275,"byte_end":19285,"line_start":94,"line_end":94,"column_start":8,"column_end":18},"name":"clone_from","qualname":"<IndexMap<K, V, S> as core::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2774},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20053,"byte_end":20056,"line_start":131,"line_end":131,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IndexMap<K, V, S> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20541,"byte_end":20544,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20473,"byte_end":20515,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20520,"byte_end":20529,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20771,"byte_end":20784,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20599,"byte_end":20668,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20673,"byte_end":20702,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20707,"byte_end":20710,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20715,"byte_end":20745,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20750,"byte_end":20759,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21082,"byte_end":21106,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20910,"byte_end":20979,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20984,"byte_end":21013,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21018,"byte_end":21021,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21026,"byte_end":21056,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21061,"byte_end":21070,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21518,"byte_end":21529,"line_start":182,"line_end":182,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21367,"byte_end":21408,"line_start":178,"line_end":178,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21413,"byte_end":21416,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21421,"byte_end":21456,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21461,"byte_end":21500,"line_start":181,"line_end":181,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21704,"byte_end":21712,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21662,"byte_end":21692,"line_start":189,"line_end":189,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21833,"byte_end":21839,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21771,"byte_end":21821,"line_start":194,"line_end":194,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22014,"byte_end":22017,"line_start":203,"line_end":203,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21893,"byte_end":21945,"line_start":199,"line_end":199,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21950,"byte_end":21953,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21958,"byte_end":21988,"line_start":201,"line_end":201,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":21993,"byte_end":22002,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22189,"byte_end":22197,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22071,"byte_end":22120,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22125,"byte_end":22128,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22133,"byte_end":22163,"line_start":209,"line_end":209,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22168,"byte_end":22177,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22336,"byte_end":22340,"line_start":216,"line_end":216,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22250,"byte_end":22324,"line_start":215,"line_end":215,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22534,"byte_end":22542,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22448,"byte_end":22522,"line_start":222,"line_end":222,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22743,"byte_end":22747,"line_start":230,"line_end":230,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22668,"byte_end":22731,"line_start":229,"line_end":229,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22937,"byte_end":22946,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"into_keys","qualname":"<IndexMap<K, V, S>>::into_keys","value":"fn into_keys(Self) -> IntoKeys<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the keys of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":22855,"byte_end":22925,"line_start":236,"line_end":236,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23141,"byte_end":23147,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23064,"byte_end":23129,"line_start":243,"line_end":243,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23366,"byte_end":23376,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the values of the map,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23259,"byte_end":23331,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23336,"byte_end":23354,"line_start":251,"line_end":251,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23590,"byte_end":23601,"line_start":259,"line_end":259,"column_start":12,"column_end":23},"name":"into_values","qualname":"<IndexMap<K, V, S>>::into_values","value":"fn into_values(Self) -> IntoValues<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an owning iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an owning iterator over the values of the map, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23506,"byte_end":23578,"line_start":258,"line_end":258,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23851,"byte_end":23856,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23723,"byte_end":23796,"line_start":265,"line_end":265,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23801,"byte_end":23804,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23809,"byte_end":23839,"line_start":267,"line_end":267,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24084,"byte_end":24092,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23908,"byte_end":23985,"line_start":272,"line_end":272,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23990,"byte_end":23993,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":23998,"byte_end":24072,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24844,"byte_end":24849,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24162,"byte_end":24229,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24234,"byte_end":24274,"line_start":280,"line_end":280,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24279,"byte_end":24282,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24287,"byte_end":24354,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24359,"byte_end":24433,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24438,"byte_end":24514,"line_start":284,"line_end":284,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24519,"byte_end":24544,"line_start":285,"line_end":285,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24549,"byte_end":24552,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24557,"byte_end":24629,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24634,"byte_end":24684,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24689,"byte_end":24692,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24697,"byte_end":24771,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":24776,"byte_end":24832,"line_start":291,"line_end":291,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25359,"byte_end":25368,"line_start":308,"line_end":308,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25019,"byte_end":25073,"line_start":301,"line_end":301,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25078,"byte_end":25081,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25086,"byte_end":25156,"line_start":303,"line_end":303,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25161,"byte_end":25234,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25239,"byte_end":25303,"line_start":305,"line_end":305,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25308,"byte_end":25311,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25316,"byte_end":25347,"line_start":307,"line_end":307,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25759,"byte_end":25766,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25645,"byte_end":25704,"line_start":324,"line_end":324,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25709,"byte_end":25712,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25717,"byte_end":25747,"line_start":326,"line_end":326,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25959,"byte_end":25972,"line_start":334,"line_end":334,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25849,"byte_end":25904,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25909,"byte_end":25912,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25917,"byte_end":25947,"line_start":333,"line_end":333,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26138,"byte_end":26147,"line_start":341,"line_end":341,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<IndexMap<K, V, S>>::shrink_to","value":"fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map with a lower limit.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map with a lower limit.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26029,"byte_end":26083,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26088,"byte_end":26091,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26096,"byte_end":26126,"line_start":340,"line_end":340,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27075,"byte_end":27081,"line_start":364,"line_end":364,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26423,"byte_end":26462,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26467,"byte_end":26470,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26475,"byte_end":26546,"line_start":353,"line_end":353,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26551,"byte_end":26624,"line_start":354,"line_end":354,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26629,"byte_end":26695,"line_start":355,"line_end":355,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26700,"byte_end":26703,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26708,"byte_end":26778,"line_start":357,"line_end":357,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26783,"byte_end":26835,"line_start":358,"line_end":358,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26840,"byte_end":26843,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26848,"byte_end":26898,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26903,"byte_end":26906,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26911,"byte_end":26986,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":26991,"byte_end":27063,"line_start":363,"line_end":363,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27867,"byte_end":27878,"line_start":381,"line_end":381,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27176,"byte_end":27236,"line_start":368,"line_end":368,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27241,"byte_end":27244,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27249,"byte_end":27320,"line_start":370,"line_end":370,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27325,"byte_end":27398,"line_start":371,"line_end":371,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27403,"byte_end":27478,"line_start":372,"line_end":372,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27483,"byte_end":27486,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27491,"byte_end":27561,"line_start":374,"line_end":374,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27566,"byte_end":27627,"line_start":375,"line_end":375,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27632,"byte_end":27635,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27640,"byte_end":27690,"line_start":377,"line_end":377,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27695,"byte_end":27698,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27703,"byte_end":27778,"line_start":379,"line_end":379,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":27783,"byte_end":27855,"line_start":380,"line_end":380,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28210,"byte_end":28215,"line_start":390,"line_end":390,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28027,"byte_end":28104,"line_start":386,"line_end":386,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28109,"byte_end":28135,"line_start":387,"line_end":387,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28140,"byte_end":28143,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28148,"byte_end":28198,"line_start":389,"line_end":389,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28465,"byte_end":28477,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"fn contains_key<Q>(&Self, &Q) -> bool where Q: ?Sized, Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28338,"byte_end":28400,"line_start":395,"line_end":395,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28405,"byte_end":28408,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28413,"byte_end":28453,"line_start":397,"line_end":397,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28771,"byte_end":28774,"line_start":409,"line_end":409,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"fn get<Q>(&Self, &Q) -> Option<&V> where Q: ?Sized, Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28614,"byte_end":28685,"line_start":405,"line_end":405,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28690,"byte_end":28706,"line_start":406,"line_end":406,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28711,"byte_end":28714,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":28719,"byte_end":28759,"line_start":408,"line_end":408,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29213,"byte_end":29226,"line_start":425,"line_end":425,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"fn get_key_value<Q>(&Self, &Q) -> Option<(&K, &V)> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29048,"byte_end":29109,"line_start":421,"line_end":421,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29114,"byte_end":29148,"line_start":422,"line_end":422,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29153,"byte_end":29156,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29161,"byte_end":29201,"line_start":424,"line_end":424,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29568,"byte_end":29576,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"fn get_full<Q>(&Self, &Q) -> Option<(usize, &K, &V)> where Q: ?Sized,\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29520,"byte_end":29556,"line_start":437,"line_end":437,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29991,"byte_end":30003,"line_start":453,"line_end":453,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"fn get_index_of<Q>(&Self, &Q) -> Option<usize> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29880,"byte_end":29926,"line_start":450,"line_end":450,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29931,"byte_end":29934,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":29939,"byte_end":29979,"line_start":452,"line_end":452,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":30273,"byte_end":30280,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"fn get_mut<Q>(&mut Self, &Q) -> Option<&mut V> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":30581,"byte_end":30593,"line_start":477,"line_end":477,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"fn get_full_mut<Q>(&mut Self, &Q) -> Option<(usize, &K, &mut V)> where\nQ: ?Sized, Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31625,"byte_end":31631,"line_start":512,"line_end":512,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"fn remove<Q>(&mut Self, &Q) -> Option<V> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31304,"byte_end":31364,"line_start":504,"line_end":504,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31369,"byte_end":31383,"line_start":505,"line_end":505,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31388,"byte_end":31391,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31396,"byte_end":31467,"line_start":507,"line_end":507,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31472,"byte_end":31543,"line_start":508,"line_end":508,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31548,"byte_end":31560,"line_start":509,"line_end":509,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31565,"byte_end":31568,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31573,"byte_end":31613,"line_start":511,"line_end":511,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32081,"byte_end":32093,"line_start":526,"line_end":526,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"fn remove_entry<Q>(&mut Self, &Q) -> Option<(K, V)> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31766,"byte_end":31827,"line_start":519,"line_end":519,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31832,"byte_end":31835,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31840,"byte_end":31917,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":31922,"byte_end":31999,"line_start":522,"line_end":522,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32004,"byte_end":32016,"line_start":523,"line_end":523,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32021,"byte_end":32024,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32029,"byte_end":32069,"line_start":525,"line_end":525,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32650,"byte_end":32661,"line_start":543,"line_end":543,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"fn swap_remove<Q>(&mut Self, &Q) -> Option<V> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32239,"byte_end":32299,"line_start":533,"line_end":533,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32304,"byte_end":32318,"line_start":534,"line_end":534,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32323,"byte_end":32326,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32331,"byte_end":32403,"line_start":536,"line_end":536,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32408,"byte_end":32471,"line_start":537,"line_end":537,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32476,"byte_end":32531,"line_start":538,"line_end":538,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32536,"byte_end":32539,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32544,"byte_end":32585,"line_start":540,"line_end":540,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32590,"byte_end":32593,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32598,"byte_end":32638,"line_start":542,"line_end":542,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33205,"byte_end":33222,"line_start":559,"line_end":559,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"fn swap_remove_entry<Q>(&mut Self, &Q) -> Option<(K, V)> where Q: ?Sized,\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32812,"byte_end":32873,"line_start":550,"line_end":550,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32878,"byte_end":32881,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32886,"byte_end":32958,"line_start":552,"line_end":552,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":32963,"byte_end":33026,"line_start":553,"line_end":553,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33031,"byte_end":33086,"line_start":554,"line_end":554,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33091,"byte_end":33094,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33099,"byte_end":33140,"line_start":556,"line_end":556,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33145,"byte_end":33148,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33153,"byte_end":33193,"line_start":558,"line_end":558,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33893,"byte_end":33909,"line_start":579,"line_end":579,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"fn swap_remove_full<Q>(&mut Self, &Q) -> Option<(usize, K, V)> where\nQ: ?Sized, Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33468,"byte_end":33535,"line_start":569,"line_end":569,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33540,"byte_end":33561,"line_start":570,"line_end":570,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33566,"byte_end":33569,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33574,"byte_end":33646,"line_start":572,"line_end":572,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33651,"byte_end":33714,"line_start":573,"line_end":573,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33719,"byte_end":33774,"line_start":574,"line_end":574,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33779,"byte_end":33782,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33787,"byte_end":33828,"line_start":576,"line_end":576,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33833,"byte_end":33836,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":33841,"byte_end":33881,"line_start":578,"line_end":578,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34576,"byte_end":34588,"line_start":600,"line_end":600,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"fn shift_remove<Q>(&mut Self, &Q) -> Option<V> where Q: ?Sized, Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34171,"byte_end":34231,"line_start":590,"line_end":590,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34236,"byte_end":34250,"line_start":591,"line_end":591,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34255,"byte_end":34258,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34263,"byte_end":34329,"line_start":593,"line_end":593,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34334,"byte_end":34395,"line_start":594,"line_end":594,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34400,"byte_end":34457,"line_start":595,"line_end":595,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34462,"byte_end":34465,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34470,"byte_end":34511,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34516,"byte_end":34519,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34524,"byte_end":34564,"line_start":599,"line_end":599,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35127,"byte_end":35145,"line_start":616,"line_end":616,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"fn shift_remove_entry<Q>(&mut Self, &Q) -> Option<(K, V)> where Q: ?Sized,\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34740,"byte_end":34801,"line_start":607,"line_end":607,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34806,"byte_end":34809,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34814,"byte_end":34880,"line_start":609,"line_end":609,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34885,"byte_end":34946,"line_start":610,"line_end":610,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":34951,"byte_end":35008,"line_start":611,"line_end":611,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35013,"byte_end":35016,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35021,"byte_end":35062,"line_start":613,"line_end":613,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35067,"byte_end":35070,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35075,"byte_end":35115,"line_start":615,"line_end":615,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35811,"byte_end":35828,"line_start":636,"line_end":636,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"fn shift_remove_full<Q>(&mut Self, &Q) -> Option<(usize, K, V)> where\nQ: ?Sized, Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35392,"byte_end":35459,"line_start":626,"line_end":626,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35464,"byte_end":35485,"line_start":627,"line_end":627,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35490,"byte_end":35493,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35498,"byte_end":35564,"line_start":629,"line_end":629,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35569,"byte_end":35630,"line_start":630,"line_end":630,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35635,"byte_end":35692,"line_start":631,"line_end":631,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35697,"byte_end":35700,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35705,"byte_end":35746,"line_start":633,"line_end":633,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35751,"byte_end":35754,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":35759,"byte_end":35799,"line_start":635,"line_end":635,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36258,"byte_end":36261,"line_start":652,"line_end":652,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36091,"byte_end":36125,"line_start":647,"line_end":647,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36130,"byte_end":36133,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36138,"byte_end":36193,"line_start":649,"line_end":649,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36198,"byte_end":36201,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36206,"byte_end":36246,"line_start":651,"line_end":651,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36604,"byte_end":36610,"line_start":663,"line_end":663,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36328,"byte_end":36400,"line_start":656,"line_end":656,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36405,"byte_end":36439,"line_start":657,"line_end":657,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36444,"byte_end":36447,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36452,"byte_end":36524,"line_start":659,"line_end":659,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36529,"byte_end":36539,"line_start":660,"line_end":660,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36544,"byte_end":36547,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36552,"byte_end":36592,"line_start":662,"line_end":662,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37065,"byte_end":37074,"line_start":680,"line_end":680,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36920,"byte_end":36993,"line_start":677,"line_end":677,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":36998,"byte_end":37001,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37006,"byte_end":37053,"line_start":679,"line_end":679,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37664,"byte_end":37671,"line_start":697,"line_end":697,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37249,"byte_end":37315,"line_start":689,"line_end":689,"column_start":5,"column_end":69}},{"value":"/ function `cmp`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37320,"byte_end":37339,"line_start":690,"line_end":690,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37344,"byte_end":37347,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37352,"byte_end":37428,"line_start":692,"line_end":692,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37433,"byte_end":37496,"line_start":693,"line_end":693,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37501,"byte_end":37504,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37509,"byte_end":37580,"line_start":695,"line_end":695,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37585,"byte_end":37652,"line_start":696,"line_end":696,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38074,"byte_end":38083,"line_start":710,"line_end":710,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37908,"byte_end":37981,"line_start":706,"line_end":706,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":37986,"byte_end":38026,"line_start":707,"line_end":707,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38031,"byte_end":38034,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38039,"byte_end":38062,"line_start":709,"line_end":709,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38608,"byte_end":38626,"line_start":725,"line_end":725,"column_start":12,"column_end":30},"name":"sort_unstable_keys","qualname":"<IndexMap<K, V, S>>::sort_unstable_keys","value":"fn sort_unstable_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs by the default ordering of the keys, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs by the default ordering of the keys, but","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38389,"byte_end":38464,"line_start":721,"line_end":721,"column_start":5,"column_end":80}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38469,"byte_end":38518,"line_start":722,"line_end":722,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38523,"byte_end":38526,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38531,"byte_end":38596,"line_start":724,"line_end":724,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39259,"byte_end":39275,"line_start":742,"line_end":742,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexMap<K, V, S>>::sort_unstable_by","value":"fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map's key-value pairs in place using the comparison function `cmp`, but\n may not preserve the order of equal elements.","sig":null,"attributes":[{"value":"/ Sort the map's key-value pairs in place using the comparison function `cmp`, but","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38810,"byte_end":38894,"line_start":734,"line_end":734,"column_start":5,"column_end":89}},{"value":"/ may not preserve the order of equal elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38899,"byte_end":38948,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38953,"byte_end":38956,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":38961,"byte_end":39037,"line_start":737,"line_end":737,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39042,"byte_end":39105,"line_start":738,"line_end":738,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39110,"byte_end":39113,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time where *n* is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39118,"byte_end":39170,"line_start":740,"line_end":740,"column_start":5,"column_end":57}},{"value":"/ the length of the map and *c* is the capacity. The sort is unstable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39175,"byte_end":39247,"line_start":741,"line_end":741,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39703,"byte_end":39721,"line_start":756,"line_end":756,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexMap<K, V, S>>::sorted_unstable_by","value":"fn sorted_unstable_by<F>(Self, F) -> IntoIter<K, V> where\nF: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by-value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by-value iterator of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39521,"byte_end":39594,"line_start":751,"line_end":751,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39599,"byte_end":39639,"line_start":752,"line_end":752,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39644,"byte_end":39647,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ The sort is unstable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39652,"byte_end":39677,"line_start":754,"line_end":754,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":39682,"byte_end":39691,"line_start":755,"line_end":755,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40173,"byte_end":40180,"line_start":770,"line_end":770,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40036,"byte_end":40099,"line_start":767,"line_end":767,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40104,"byte_end":40107,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40112,"byte_end":40161,"line_start":769,"line_end":769,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40417,"byte_end":40426,"line_start":781,"line_end":781,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40269,"byte_end":40302,"line_start":776,"line_end":776,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40307,"byte_end":40310,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40315,"byte_end":40362,"line_start":778,"line_end":778,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40367,"byte_end":40370,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40375,"byte_end":40405,"line_start":780,"line_end":780,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40684,"byte_end":40697,"line_start":790,"line_end":790,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40536,"byte_end":40569,"line_start":785,"line_end":785,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40574,"byte_end":40577,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40582,"byte_end":40629,"line_start":787,"line_end":787,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40634,"byte_end":40637,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40642,"byte_end":40672,"line_start":789,"line_end":789,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40914,"byte_end":40919,"line_start":797,"line_end":797,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40827,"byte_end":40859,"line_start":794,"line_end":794,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40864,"byte_end":40867,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40872,"byte_end":40902,"line_start":796,"line_end":796,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41133,"byte_end":41142,"line_start":804,"line_end":804,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41012,"byte_end":41078,"line_start":801,"line_end":801,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41083,"byte_end":41086,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41091,"byte_end":41121,"line_start":803,"line_end":803,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41340,"byte_end":41344,"line_start":811,"line_end":811,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41254,"byte_end":41285,"line_start":808,"line_end":808,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41290,"byte_end":41293,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41298,"byte_end":41328,"line_start":810,"line_end":810,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41556,"byte_end":41564,"line_start":818,"line_end":818,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41436,"byte_end":41501,"line_start":815,"line_end":815,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41506,"byte_end":41509,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41514,"byte_end":41544,"line_start":817,"line_end":817,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42051,"byte_end":42068,"line_start":831,"line_end":831,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41675,"byte_end":41713,"line_start":822,"line_end":822,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41718,"byte_end":41721,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41726,"byte_end":41773,"line_start":824,"line_end":824,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41778,"byte_end":41781,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41786,"byte_end":41858,"line_start":826,"line_end":826,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41863,"byte_end":41926,"line_start":827,"line_end":827,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41931,"byte_end":41986,"line_start":828,"line_end":828,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41991,"byte_end":41994,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":41999,"byte_end":42039,"line_start":830,"line_end":830,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42538,"byte_end":42556,"line_start":844,"line_end":844,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42168,"byte_end":42206,"line_start":835,"line_end":835,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42211,"byte_end":42214,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42219,"byte_end":42266,"line_start":837,"line_end":837,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42271,"byte_end":42274,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42279,"byte_end":42345,"line_start":839,"line_end":839,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42350,"byte_end":42411,"line_start":840,"line_end":840,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42416,"byte_end":42473,"line_start":841,"line_end":841,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42478,"byte_end":42481,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42486,"byte_end":42526,"line_start":843,"line_end":843,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43096,"byte_end":43106,"line_start":857,"line_end":857,"column_start":12,"column_end":22},"name":"move_index","qualname":"<IndexMap<K, V, S>>::move_index","value":"fn move_index(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Moves the position of a key-value pair from one index to another\n by shifting all other pairs in-between.","sig":null,"attributes":[{"value":"/ Moves the position of a key-value pair from one index to another","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42657,"byte_end":42725,"line_start":848,"line_end":848,"column_start":5,"column_end":73}},{"value":"/ by shifting all other pairs in-between.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42730,"byte_end":42773,"line_start":849,"line_end":849,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42778,"byte_end":42781,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ * If `from < to`, the other pairs will shift down while the targeted pair moves up.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42786,"byte_end":42873,"line_start":851,"line_end":851,"column_start":5,"column_end":92}},{"value":"/ * If `from > to`, the other pairs will shift up while the targeted pair moves down.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42878,"byte_end":42965,"line_start":852,"line_end":852,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42970,"byte_end":42973,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `from` or `to` are out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":42978,"byte_end":43031,"line_start":854,"line_end":854,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43036,"byte_end":43039,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43044,"byte_end":43084,"line_start":856,"line_end":856,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43325,"byte_end":43337,"line_start":864,"line_end":864,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43194,"byte_end":43251,"line_start":861,"line_end":861,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43256,"byte_end":43259,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43264,"byte_end":43313,"line_start":863,"line_end":863,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":549},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43674,"byte_end":43678,"line_start":876,"line_end":876,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":553}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43417,"byte_end":43463,"line_start":869,"line_end":869,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43464,"byte_end":43467,"line_start":870,"line_end":870,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43468,"byte_end":43544,"line_start":871,"line_end":871,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43545,"byte_end":43572,"line_start":872,"line_end":872,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43573,"byte_end":43576,"line_start":873,"line_end":873,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43577,"byte_end":43623,"line_start":874,"line_end":874,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43624,"byte_end":43662,"line_start":875,"line_end":875,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44010,"byte_end":44013,"line_start":891,"line_end":891,"column_start":8,"column_end":11},"name":"len","qualname":"<Keys as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44213,"byte_end":44218,"line_start":900,"line_end":900,"column_start":8,"column_end":13},"name":"clone","qualname":"<Keys as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44369,"byte_end":44372,"line_start":908,"line_end":908,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Keys as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":577},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44767,"byte_end":44775,"line_start":920,"line_end":920,"column_start":12,"column_end":20},"name":"IntoKeys","qualname":"::map::IntoKeys","value":"IntoKeys {  }","parent":null,"children":[{"krate":0,"index":580}],"decl_id":null,"docs":" An owning iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44488,"byte_end":44541,"line_start":913,"line_end":913,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44542,"byte_end":44545,"line_start":914,"line_end":914,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_keys`] method on [`IndexMap`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44546,"byte_end":44619,"line_start":915,"line_end":915,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44620,"byte_end":44655,"line_start":916,"line_end":916,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44656,"byte_end":44659,"line_start":917,"line_end":917,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44660,"byte_end":44698,"line_start":918,"line_end":918,"column_start":1,"column_end":39}},{"value":"/ [`into_keys`]: struct.IndexMap.html#method.into_keys","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44699,"byte_end":44755,"line_start":919,"line_end":919,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45087,"byte_end":45090,"line_start":935,"line_end":935,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoKeys<K, V> as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45252,"byte_end":45255,"line_start":943,"line_end":943,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IntoKeys<K, V> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":599},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45697,"byte_end":45703,"line_start":956,"line_end":956,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":603}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45432,"byte_end":45480,"line_start":949,"line_end":949,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45481,"byte_end":45484,"line_start":950,"line_end":950,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45485,"byte_end":45563,"line_start":951,"line_end":951,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45564,"byte_end":45591,"line_start":952,"line_end":952,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45592,"byte_end":45595,"line_start":953,"line_end":953,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45596,"byte_end":45646,"line_start":954,"line_end":954,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45647,"byte_end":45685,"line_start":955,"line_end":955,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46045,"byte_end":46048,"line_start":971,"line_end":971,"column_start":8,"column_end":11},"name":"len","qualname":"<Values as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46252,"byte_end":46257,"line_start":980,"line_end":980,"column_start":8,"column_end":13},"name":"clone","qualname":"<Values as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46412,"byte_end":46415,"line_start":988,"line_end":988,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Values as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":627},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46815,"byte_end":46824,"line_start":1000,"line_end":1000,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":631}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46531,"byte_end":46586,"line_start":993,"line_end":993,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46587,"byte_end":46590,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46591,"byte_end":46673,"line_start":995,"line_end":995,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46674,"byte_end":46701,"line_start":996,"line_end":996,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46702,"byte_end":46705,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46706,"byte_end":46764,"line_start":998,"line_end":998,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46765,"byte_end":46803,"line_start":999,"line_end":999,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47182,"byte_end":47185,"line_start":1015,"line_end":1015,"column_start":8,"column_end":11},"name":"len","qualname":"<ValuesMut as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47357,"byte_end":47360,"line_start":1023,"line_end":1023,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ValuesMut as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":651},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47826,"byte_end":47836,"line_start":1036,"line_end":1036,"column_start":12,"column_end":22},"name":"IntoValues","qualname":"::map::IntoValues","value":"IntoValues {  }","parent":null,"children":[{"krate":0,"index":654}],"decl_id":null,"docs":" An owning iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the values of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47539,"byte_end":47594,"line_start":1029,"line_end":1029,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47595,"byte_end":47598,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_values`] method on [`IndexMap`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47599,"byte_end":47674,"line_start":1031,"line_end":1031,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47675,"byte_end":47710,"line_start":1032,"line_end":1032,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47711,"byte_end":47714,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47715,"byte_end":47753,"line_start":1034,"line_end":1034,"column_start":1,"column_end":39}},{"value":"/ [`into_values`]: struct.IndexMap.html#method.into_values","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47754,"byte_end":47814,"line_start":1035,"line_end":1035,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48158,"byte_end":48161,"line_start":1051,"line_end":1051,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoValues<K, V> as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48327,"byte_end":48330,"line_start":1059,"line_end":1059,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IntoValues<K, V> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":673},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48769,"byte_end":48773,"line_start":1072,"line_end":1072,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":677}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48509,"byte_end":48558,"line_start":1065,"line_end":1065,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48559,"byte_end":48562,"line_start":1066,"line_end":1066,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48563,"byte_end":48639,"line_start":1067,"line_end":1067,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48640,"byte_end":48667,"line_start":1068,"line_end":1068,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48668,"byte_end":48671,"line_start":1069,"line_end":1069,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48672,"byte_end":48718,"line_start":1070,"line_end":1070,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48719,"byte_end":48757,"line_start":1071,"line_end":1071,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49108,"byte_end":49111,"line_start":1087,"line_end":1087,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49311,"byte_end":49316,"line_start":1096,"line_end":1096,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49479,"byte_end":49482,"line_start":1104,"line_end":1104,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Iter as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":701},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49877,"byte_end":49884,"line_start":1116,"line_end":1116,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":705}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49598,"byte_end":49654,"line_start":1109,"line_end":1109,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49655,"byte_end":49658,"line_start":1110,"line_end":1110,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49659,"byte_end":49739,"line_start":1111,"line_end":1111,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49740,"byte_end":49767,"line_start":1112,"line_end":1112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49768,"byte_end":49771,"line_start":1113,"line_end":1113,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49772,"byte_end":49826,"line_start":1114,"line_end":1114,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49827,"byte_end":49865,"line_start":1115,"line_end":1115,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50241,"byte_end":50244,"line_start":1131,"line_end":1131,"column_start":8,"column_end":11},"name":"len","qualname":"<IterMut as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50424,"byte_end":50427,"line_start":1139,"line_end":1139,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IterMut as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":725},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50922,"byte_end":50930,"line_start":1152,"line_end":1152,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":728}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50601,"byte_end":50657,"line_start":1145,"line_end":1145,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50658,"byte_end":50661,"line_start":1146,"line_end":1146,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50662,"byte_end":50734,"line_start":1147,"line_end":1147,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50735,"byte_end":50810,"line_start":1148,"line_end":1148,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50811,"byte_end":50814,"line_start":1149,"line_end":1149,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50815,"byte_end":50871,"line_start":1150,"line_end":1150,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50872,"byte_end":50910,"line_start":1151,"line_end":1151,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51259,"byte_end":51262,"line_start":1167,"line_end":1167,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoIter<K, V> as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51436,"byte_end":51439,"line_start":1175,"line_end":1175,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IntoIter<K, V> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":747},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51884,"byte_end":51889,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":751}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51613,"byte_end":51670,"line_start":1181,"line_end":1181,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51671,"byte_end":51674,"line_start":1182,"line_end":1182,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51675,"byte_end":51752,"line_start":1183,"line_end":1183,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51753,"byte_end":51780,"line_start":1184,"line_end":1184,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51781,"byte_end":51784,"line_start":1185,"line_end":1185,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51785,"byte_end":51833,"line_start":1186,"line_end":1186,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51834,"byte_end":51872,"line_start":1187,"line_end":1187,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52237,"byte_end":52240,"line_start":1203,"line_end":1203,"column_start":8,"column_end":11},"name":"len","qualname":"<Drain as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52416,"byte_end":52419,"line_start":1211,"line_end":1211,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Drain as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52727,"byte_end":52736,"line_start":1220,"line_end":1220,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a IndexMap<K, V, S> as core::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":1,"index":7991},"children":[],"decl_id":{"krate":1,"index":7994},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52937,"byte_end":52946,"line_start":1228,"line_end":1228,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a mut IndexMap<K, V, S> as core::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":1,"index":7991},"children":[],"decl_id":{"krate":1,"index":7994},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53124,"byte_end":53133,"line_start":1236,"line_end":1236,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<IndexMap<K, V, S> as core::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":1,"index":7991},"children":[],"decl_id":{"krate":1,"index":7994},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":54094,"byte_end":54099,"line_start":1276,"line_end":1276,"column_start":8,"column_end":13},"name":"index","qualname":"<IndexMap<K, V, S> as core::ops::Index>::index","value":"fn index(&Self, &Q) -> &V","parent":{"krate":1,"index":3454},"children":[],"decl_id":{"krate":1,"index":3457},"docs":" Returns a reference to the value corresponding to the supplied `key`.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the supplied `key`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53948,"byte_end":54021,"line_start":1273,"line_end":1273,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":54026,"byte_end":54029,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `key` is not present in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":54034,"byte_end":54086,"line_start":1275,"line_end":1275,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55256,"byte_end":55265,"line_start":1319,"line_end":1319,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<IndexMap<K, V, S> as core::ops::IndexMut>::index_mut","value":"fn index_mut(&mut Self, &Q) -> &mut V","parent":{"krate":1,"index":3458},"children":[],"decl_id":{"krate":1,"index":3460},"docs":" Returns a mutable reference to the value corresponding to the supplied `key`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the supplied `key`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55102,"byte_end":55183,"line_start":1316,"line_end":1316,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55188,"byte_end":55191,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `key` is not present in the map.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55196,"byte_end":55248,"line_start":1318,"line_end":1318,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56263,"byte_end":56268,"line_start":1358,"line_end":1358,"column_start":8,"column_end":13},"name":"index","qualname":"<IndexMap<K, V, S> as core::ops::Index>::index","value":"fn index(&Self, usize) -> &V","parent":{"krate":1,"index":3454},"children":[],"decl_id":{"krate":1,"index":3457},"docs":" Returns a reference to the value at the supplied `index`.","sig":null,"attributes":[{"value":"/ Returns a reference to the value at the supplied `index`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56136,"byte_end":56197,"line_start":1355,"line_end":1355,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56202,"byte_end":56205,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `index` is out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56210,"byte_end":56255,"line_start":1357,"line_end":1357,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57351,"byte_end":57360,"line_start":1398,"line_end":1398,"column_start":8,"column_end":17},"name":"index_mut","qualname":"<IndexMap<K, V, S> as core::ops::IndexMut>::index_mut","value":"fn index_mut(&mut Self, usize) -> &mut V","parent":{"krate":1,"index":3458},"children":[],"decl_id":{"krate":1,"index":3460},"docs":" Returns a mutable reference to the value at the supplied `index`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value at the supplied `index`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57216,"byte_end":57285,"line_start":1395,"line_end":1395,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57290,"byte_end":57293,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `index` is out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57298,"byte_end":57343,"line_start":1397,"line_end":1397,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57838,"byte_end":57847,"line_start":1415,"line_end":1415,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<IndexMap<K, V, S> as core::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item = (K, V)>","parent":{"krate":1,"index":7987},"children":[],"decl_id":{"krate":1,"index":7989},"docs":" Create an `IndexMap` from the sequence of key-value pairs in the\n iterable.","sig":null,"attributes":[{"value":"/ Create an `IndexMap` from the sequence of key-value pairs in the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57626,"byte_end":57694,"line_start":1410,"line_end":1410,"column_start":5,"column_end":73}},{"value":"/ iterable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57699,"byte_end":57712,"line_start":1411,"line_end":1411,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57717,"byte_end":57720,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ `from_iter` uses the same logic as `extend`. See","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57725,"byte_end":57777,"line_start":1413,"line_end":1413,"column_start":5,"column_end":57}},{"value":"/ [`extend`](#method.extend) for more details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57782,"byte_end":57830,"line_start":1414,"line_end":1414,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58469,"byte_end":58473,"line_start":1438,"line_end":1438,"column_start":8,"column_end":12},"name":"from","qualname":"<IndexMap<K, V, RandomState> as core::convert::From>::from","value":"fn from([(K, V); ]) -> Self","parent":{"krate":1,"index":3056},"children":[],"decl_id":{"krate":1,"index":3058},"docs":" # Examples","sig":null,"attributes":[{"value":"/ # Examples","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58230,"byte_end":58244,"line_start":1429,"line_end":1429,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58249,"byte_end":58252,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58257,"byte_end":58264,"line_start":1431,"line_end":1431,"column_start":5,"column_end":12}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58269,"byte_end":58296,"line_start":1432,"line_end":1432,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58301,"byte_end":58304,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ let map1 = IndexMap::from([(1, 2), (3, 4)]);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58309,"byte_end":58357,"line_start":1434,"line_end":1434,"column_start":5,"column_end":53}},{"value":"/ let map2: IndexMap<_, _> = [(1, 2), (3, 4)].into();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58362,"byte_end":58417,"line_start":1435,"line_end":1435,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(map1, map2);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58422,"byte_end":58449,"line_start":1436,"line_end":1436,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58454,"byte_end":58461,"line_start":1437,"line_end":1437,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59121,"byte_end":59127,"line_start":1457,"line_end":1457,"column_start":8,"column_end":14},"name":"extend","qualname":"<IndexMap<K, V, S> as core::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = (K, V)>","parent":{"krate":1,"index":8000},"children":[],"decl_id":{"krate":1,"index":8002},"docs":" Extend the map with all key-value pairs in the iterable.","sig":null,"attributes":[{"value":"/ Extend the map with all key-value pairs in the iterable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58641,"byte_end":58701,"line_start":1448,"line_end":1448,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58706,"byte_end":58709,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to calling [`insert`](#method.insert) for each of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58714,"byte_end":58786,"line_start":1450,"line_end":1450,"column_start":5,"column_end":77}},{"value":"/ them in order, which means that for keys that already existed","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58791,"byte_end":58856,"line_start":1451,"line_end":1451,"column_start":5,"column_end":70}},{"value":"/ in the map, their value is updated but it keeps the existing order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58861,"byte_end":58932,"line_start":1452,"line_end":1452,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58937,"byte_end":58940,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ New keys are inserted in the order they appear in the sequence. If","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58945,"byte_end":59015,"line_start":1454,"line_end":1454,"column_start":5,"column_end":75}},{"value":"/ equivalents of a key occur more than once, the last corresponding value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59020,"byte_end":59095,"line_start":1455,"line_end":1455,"column_start":5,"column_end":80}},{"value":"/ prevails.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59100,"byte_end":59113,"line_start":1456,"line_end":1456,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60098,"byte_end":60104,"line_start":1485,"line_end":1485,"column_start":8,"column_end":14},"name":"extend","qualname":"<IndexMap<K, V, S> as core::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = (&'a K, &'a V)>","parent":{"krate":1,"index":8000},"children":[],"decl_id":{"krate":1,"index":8002},"docs":" Extend the map with all key-value pairs in the iterable.","sig":null,"attributes":[{"value":"/ Extend the map with all key-value pairs in the iterable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59968,"byte_end":60028,"line_start":1482,"line_end":1482,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60033,"byte_end":60036,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ See the first extend method for more details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60041,"byte_end":60090,"line_start":1484,"line_end":1484,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60368,"byte_end":60375,"line_start":1495,"line_end":1495,"column_start":8,"column_end":15},"name":"default","qualname":"<IndexMap<K, V, S> as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3128},"children":[],"decl_id":{"krate":1,"index":3129},"docs":" Return an empty `IndexMap`\n","sig":null,"attributes":[{"value":"/ Return an empty `IndexMap`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60330,"byte_end":60360,"line_start":1494,"line_end":1494,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":856},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60630,"byte_end":60632,"line_start":1507,"line_end":1507,"column_start":8,"column_end":10},"name":"eq","qualname":"<IndexMap<K, V1, S1> as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &IndexMap<K, V2, S2>) -> bool","parent":{"krate":1,"index":2802},"children":[],"decl_id":{"krate":1,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":863},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":891},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":901},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":932},{"krate":0,"index":937},{"krate":0,"index":946},{"krate":0,"index":950},{"krate":0,"index":954},{"krate":0,"index":969},{"krate":0,"index":1043},{"krate":0,"index":1055},{"krate":0,"index":1060},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1080},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1114},{"krate":0,"index":1121},{"krate":0,"index":1127},{"krate":0,"index":1133},{"krate":0,"index":1139},{"krate":0,"index":1145},{"krate":0,"index":1151},{"krate":0,"index":1155},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1175},{"krate":0,"index":1181},{"krate":0,"index":1188},{"krate":0,"index":1192},{"krate":0,"index":1195},{"krate":0,"index":1199},{"krate":0,"index":1203},{"krate":0,"index":1209},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1227},{"krate":0,"index":1231},{"krate":0,"index":1237},{"krate":0,"index":1248},{"krate":0,"index":1256},{"krate":0,"index":1260},{"krate":0,"index":1265},{"krate":0,"index":1270},{"krate":0,"index":1275},{"krate":0,"index":1285},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1299},{"krate":0,"index":1303},{"krate":0,"index":1309},{"krate":0,"index":1315},{"krate":0,"index":1321}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104292,"byte_end":104335,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":928},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106382,"byte_end":106390,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":931}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104776,"byte_end":104854,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104855,"byte_end":104871,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104872,"byte_end":104875,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104876,"byte_end":104953,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104954,"byte_end":104982,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104983,"byte_end":104986,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104987,"byte_end":104998,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":104999,"byte_end":105002,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105003,"byte_end":105079,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105080,"byte_end":105156,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105157,"byte_end":105232,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105233,"byte_end":105303,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105304,"byte_end":105324,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105325,"byte_end":105328,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105329,"byte_end":105405,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105406,"byte_end":105478,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105479,"byte_end":105533,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105534,"byte_end":105537,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105538,"byte_end":105612,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105613,"byte_end":105689,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105690,"byte_end":105755,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105756,"byte_end":105759,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105760,"byte_end":105773,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105774,"byte_end":105777,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105778,"byte_end":105850,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105851,"byte_end":105930,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":105931,"byte_end":106000,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106001,"byte_end":106004,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106005,"byte_end":106019,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106020,"byte_end":106023,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106024,"byte_end":106031,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106032,"byte_end":106059,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106060,"byte_end":106063,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106064,"byte_end":106115,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106116,"byte_end":106193,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106194,"byte_end":106197,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106198,"byte_end":106234,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106235,"byte_end":106271,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106272,"byte_end":106308,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106309,"byte_end":106346,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106347,"byte_end":106354,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106355,"byte_end":106370,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106626,"byte_end":106631,"line_start":76,"line_end":76,"column_start":8,"column_end":13},"name":"clone","qualname":"<IndexSet<T, S> as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106727,"byte_end":106737,"line_start":82,"line_end":82,"column_start":8,"column_end":18},"name":"clone_from","qualname":"<IndexSet<T, S> as core::clone::Clone>::clone_from","value":"fn clone_from(&mut Self, &Self)","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2774},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107406,"byte_end":107409,"line_start":117,"line_end":117,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IndexSet<T, S> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107834,"byte_end":107837,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107780,"byte_end":107822,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108075,"byte_end":108088,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107924,"byte_end":107976,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107981,"byte_end":108020,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108025,"byte_end":108028,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108033,"byte_end":108063,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":957},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108375,"byte_end":108399,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108224,"byte_end":108276,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108281,"byte_end":108320,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108325,"byte_end":108328,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108333,"byte_end":108363,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108698,"byte_end":108709,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`.","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108547,"byte_end":108588,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108593,"byte_end":108596,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This function is `const`, so it","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108601,"byte_end":108636,"line_start":160,"line_end":160,"column_start":5,"column_end":40}},{"value":"/ can be called in `static` contexts.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108641,"byte_end":108680,"line_start":161,"line_end":161,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108873,"byte_end":108881,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108831,"byte_end":108861,"line_start":168,"line_end":168,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109001,"byte_end":109007,"line_start":174,"line_end":174,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108939,"byte_end":108989,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109160,"byte_end":109163,"line_start":181,"line_end":181,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109060,"byte_end":109105,"line_start":178,"line_end":178,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109110,"byte_end":109113,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109118,"byte_end":109148,"line_start":180,"line_end":180,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109320,"byte_end":109328,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109216,"byte_end":109265,"line_start":185,"line_end":185,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109270,"byte_end":109273,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109278,"byte_end":109308,"line_start":187,"line_end":187,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":963},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109462,"byte_end":109466,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109385,"byte_end":109450,"line_start":192,"line_end":192,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109696,"byte_end":109701,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109575,"byte_end":109641,"line_start":199,"line_end":199,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109646,"byte_end":109649,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109654,"byte_end":109684,"line_start":201,"line_end":201,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109928,"byte_end":109936,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109752,"byte_end":109829,"line_start":206,"line_end":206,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109834,"byte_end":109837,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":109842,"byte_end":109916,"line_start":208,"line_end":208,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110678,"byte_end":110683,"line_start":226,"line_end":226,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110005,"byte_end":110079,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110084,"byte_end":110108,"line_start":214,"line_end":214,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110113,"byte_end":110116,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110121,"byte_end":110188,"line_start":216,"line_end":216,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110193,"byte_end":110267,"line_start":217,"line_end":217,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110272,"byte_end":110348,"line_start":218,"line_end":218,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110353,"byte_end":110378,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110383,"byte_end":110386,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110391,"byte_end":110463,"line_start":221,"line_end":221,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110468,"byte_end":110518,"line_start":222,"line_end":222,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110523,"byte_end":110526,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110531,"byte_end":110605,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110610,"byte_end":110666,"line_start":225,"line_end":225,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111194,"byte_end":111203,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110854,"byte_end":110908,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110913,"byte_end":110916,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110921,"byte_end":110991,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":110996,"byte_end":111069,"line_start":238,"line_end":238,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111074,"byte_end":111138,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111143,"byte_end":111146,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111151,"byte_end":111182,"line_start":241,"line_end":241,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111524,"byte_end":111531,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111419,"byte_end":111469,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111474,"byte_end":111477,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111482,"byte_end":111512,"line_start":259,"line_end":259,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111723,"byte_end":111736,"line_start":267,"line_end":267,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111613,"byte_end":111668,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111673,"byte_end":111676,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111681,"byte_end":111711,"line_start":266,"line_end":266,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111904,"byte_end":111913,"line_start":274,"line_end":274,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<IndexSet<T, S>>::shrink_to","value":"fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set with a lower limit.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set with a lower limit.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111795,"byte_end":111849,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111854,"byte_end":111857,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111862,"byte_end":111892,"line_start":273,"line_end":273,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112353,"byte_end":112359,"line_start":286,"line_end":286,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112001,"byte_end":112035,"line_start":278,"line_end":278,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112040,"byte_end":112043,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112048,"byte_end":112111,"line_start":280,"line_end":280,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112116,"byte_end":112177,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112182,"byte_end":112245,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112250,"byte_end":112278,"line_start":283,"line_end":283,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112283,"byte_end":112286,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112291,"byte_end":112341,"line_start":285,"line_end":285,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112897,"byte_end":112908,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112447,"byte_end":112500,"line_start":290,"line_end":290,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112505,"byte_end":112508,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112513,"byte_end":112576,"line_start":292,"line_end":292,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112581,"byte_end":112640,"line_start":293,"line_end":293,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112645,"byte_end":112709,"line_start":294,"line_end":294,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112714,"byte_end":112781,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112786,"byte_end":112822,"line_start":296,"line_end":296,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112827,"byte_end":112830,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":112835,"byte_end":112885,"line_start":298,"line_end":298,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113398,"byte_end":113408,"line_start":315,"line_end":315,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113230,"byte_end":113304,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113309,"byte_end":113312,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113317,"byte_end":113386,"line_start":314,"line_end":314,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113857,"byte_end":113877,"line_start":330,"line_end":330,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113613,"byte_end":113682,"line_start":325,"line_end":325,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113687,"byte_end":113707,"line_start":326,"line_end":326,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113712,"byte_end":113715,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113720,"byte_end":113792,"line_start":328,"line_end":328,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":113797,"byte_end":113845,"line_start":329,"line_end":329,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114317,"byte_end":114329,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114148,"byte_end":114223,"line_start":342,"line_end":342,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114228,"byte_end":114231,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114236,"byte_end":114305,"line_start":344,"line_end":344,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":987},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114771,"byte_end":114776,"line_start":359,"line_end":359,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114538,"byte_end":114607,"line_start":355,"line_end":355,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114612,"byte_end":114615,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114620,"byte_end":114692,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114697,"byte_end":114759,"line_start":358,"line_end":358,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115110,"byte_end":115118,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"fn contains<Q>(&Self, &Q) -> bool where Q: ?Sized, Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":114981,"byte_end":115045,"line_start":368,"line_end":368,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115050,"byte_end":115053,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115058,"byte_end":115098,"line_start":370,"line_end":370,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115411,"byte_end":115414,"line_start":382,"line_end":382,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"fn get<Q>(&Self, &Q) -> Option<&T> where Q: ?Sized, Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115253,"byte_end":115325,"line_start":378,"line_end":378,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115330,"byte_end":115346,"line_start":379,"line_end":379,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115351,"byte_end":115354,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115359,"byte_end":115399,"line_start":381,"line_end":381,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115617,"byte_end":115625,"line_start":390,"line_end":390,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"fn get_full<Q>(&Self, &Q) -> Option<(usize, &T)> where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115574,"byte_end":115605,"line_start":389,"line_end":389,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115855,"byte_end":115867,"line_start":398,"line_end":398,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"fn get_index_of<Q>(&Self, &Q) -> Option<usize> where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":115797,"byte_end":115843,"line_start":397,"line_end":397,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116256,"byte_end":116263,"line_start":410,"line_end":410,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116011,"byte_end":116085,"line_start":405,"line_end":405,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116090,"byte_end":116163,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/ the replaced value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116168,"byte_end":116191,"line_start":407,"line_end":407,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116196,"byte_end":116199,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116204,"byte_end":116244,"line_start":409,"line_end":409,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116617,"byte_end":116629,"line_start":419,"line_end":419,"column_start":12,"column_end":24},"name":"replace_full","qualname":"<IndexSet<T, S>>::replace_full","value":"fn replace_full(&mut Self, T) -> (usize, Option<T>)","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one, without altering its insertion order. Returns\n the index of the item and its replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116346,"byte_end":116420,"line_start":414,"line_end":414,"column_start":5,"column_end":79}},{"value":"/ equal to the given one, without altering its insertion order. Returns","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116425,"byte_end":116498,"line_start":415,"line_end":415,"column_start":5,"column_end":78}},{"value":"/ the index of the item and its replaced value.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116503,"byte_end":116552,"line_start":416,"line_end":416,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116557,"byte_end":116560,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116565,"byte_end":116605,"line_start":418,"line_end":418,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117275,"byte_end":117281,"line_start":438,"line_end":438,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"fn remove<Q>(&mut Self, &Q) -> bool where Q: ?Sized, Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":116972,"byte_end":117043,"line_start":432,"line_end":432,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117048,"byte_end":117051,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117056,"byte_end":117126,"line_start":434,"line_end":434,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117131,"byte_end":117210,"line_start":435,"line_end":435,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117215,"byte_end":117218,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117223,"byte_end":117263,"line_start":437,"line_end":437,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117827,"byte_end":117838,"line_start":454,"line_end":454,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"fn swap_remove<Q>(&mut Self, &Q) -> bool where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117415,"byte_end":117486,"line_start":445,"line_end":445,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117491,"byte_end":117494,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117499,"byte_end":117572,"line_start":447,"line_end":447,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117577,"byte_end":117640,"line_start":448,"line_end":448,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117645,"byte_end":117700,"line_start":449,"line_end":449,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117705,"byte_end":117708,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117713,"byte_end":117762,"line_start":451,"line_end":451,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117767,"byte_end":117770,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117775,"byte_end":117815,"line_start":453,"line_end":453,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118392,"byte_end":118404,"line_start":470,"line_end":470,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"fn shift_remove<Q>(&mut Self, &Q) -> bool where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":117986,"byte_end":118057,"line_start":461,"line_end":461,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118062,"byte_end":118065,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118070,"byte_end":118137,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118142,"byte_end":118203,"line_start":464,"line_end":464,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118208,"byte_end":118265,"line_start":465,"line_end":465,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118270,"byte_end":118273,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118278,"byte_end":118327,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118332,"byte_end":118335,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118340,"byte_end":118380,"line_start":469,"line_end":469,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118890,"byte_end":118894,"line_start":485,"line_end":485,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"fn take<Q>(&mut Self, &Q) -> Option<T> where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118553,"byte_end":118627,"line_start":477,"line_end":477,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118632,"byte_end":118646,"line_start":478,"line_end":478,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118651,"byte_end":118654,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118659,"byte_end":118730,"line_start":480,"line_end":480,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118735,"byte_end":118808,"line_start":481,"line_end":481,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118813,"byte_end":118825,"line_start":482,"line_end":482,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118830,"byte_end":118833,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":118838,"byte_end":118878,"line_start":484,"line_end":484,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119464,"byte_end":119473,"line_start":502,"line_end":502,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"fn swap_take<Q>(&mut Self, &Q) -> Option<T> where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119031,"byte_end":119105,"line_start":492,"line_end":492,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119110,"byte_end":119124,"line_start":493,"line_end":493,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119129,"byte_end":119132,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119137,"byte_end":119210,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119215,"byte_end":119278,"line_start":496,"line_end":496,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119283,"byte_end":119338,"line_start":497,"line_end":497,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119343,"byte_end":119346,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119351,"byte_end":119399,"line_start":499,"line_end":499,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119404,"byte_end":119407,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119412,"byte_end":119452,"line_start":501,"line_end":501,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120066,"byte_end":120076,"line_start":519,"line_end":519,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"fn shift_take<Q>(&mut Self, &Q) -> Option<T> where Q: ?Sized, Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119639,"byte_end":119713,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119718,"byte_end":119732,"line_start":510,"line_end":510,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119737,"byte_end":119740,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119745,"byte_end":119812,"line_start":512,"line_end":512,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119817,"byte_end":119878,"line_start":513,"line_end":513,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119883,"byte_end":119940,"line_start":514,"line_end":514,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119945,"byte_end":119948,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":119953,"byte_end":120001,"line_start":516,"line_end":516,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120006,"byte_end":120009,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120014,"byte_end":120054,"line_start":518,"line_end":518,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120595,"byte_end":120611,"line_start":533,"line_end":533,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"fn swap_remove_full<Q>(&mut Self, &Q) -> Option<(usize, T)> where Q: ?Sized,\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120243,"byte_end":120308,"line_start":526,"line_end":526,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120313,"byte_end":120316,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120321,"byte_end":120394,"line_start":528,"line_end":528,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120399,"byte_end":120462,"line_start":529,"line_end":529,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120467,"byte_end":120522,"line_start":530,"line_end":530,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120527,"byte_end":120530,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120535,"byte_end":120583,"line_start":532,"line_end":532,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121139,"byte_end":121156,"line_start":547,"line_end":547,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"fn shift_remove_full<Q>(&mut Self, &Q) -> Option<(usize, T)> where Q: ?Sized,\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120793,"byte_end":120858,"line_start":540,"line_end":540,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120863,"byte_end":120866,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120871,"byte_end":120938,"line_start":542,"line_end":542,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":120943,"byte_end":121004,"line_start":543,"line_end":543,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121009,"byte_end":121066,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121071,"byte_end":121074,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121079,"byte_end":121127,"line_start":546,"line_end":546,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121497,"byte_end":121500,"line_start":559,"line_end":559,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121339,"byte_end":121364,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121369,"byte_end":121372,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ This preserves the order of the remaining elements.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121377,"byte_end":121432,"line_start":556,"line_end":556,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121437,"byte_end":121440,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121445,"byte_end":121485,"line_start":558,"line_end":558,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121845,"byte_end":121851,"line_start":570,"line_end":570,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121578,"byte_end":121641,"line_start":563,"line_end":563,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121646,"byte_end":121680,"line_start":564,"line_end":564,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121685,"byte_end":121688,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121693,"byte_end":121765,"line_start":566,"line_end":566,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121770,"byte_end":121780,"line_start":567,"line_end":567,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121785,"byte_end":121788,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121793,"byte_end":121833,"line_start":569,"line_end":569,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122113,"byte_end":122117,"line_start":580,"line_end":580,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":121987,"byte_end":122041,"line_start":577,"line_end":577,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122046,"byte_end":122049,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ See [`sort_by`](Self::sort_by) for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122054,"byte_end":122101,"line_start":579,"line_end":579,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1029},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122374,"byte_end":122381,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `cmp`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122201,"byte_end":122274,"line_start":587,"line_end":587,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122279,"byte_end":122282,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122287,"byte_end":122362,"line_start":589,"line_end":589,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122676,"byte_end":122685,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122528,"byte_end":122592,"line_start":597,"line_end":597,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122597,"byte_end":122628,"line_start":598,"line_end":598,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122633,"byte_end":122636,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122641,"byte_end":122664,"line_start":600,"line_end":600,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123102,"byte_end":123115,"line_start":615,"line_end":615,"column_start":12,"column_end":25},"name":"sort_unstable","qualname":"<IndexSet<T, S>>::sort_unstable","value":"fn sort_unstable(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set's values by their default ordering.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":122960,"byte_end":123012,"line_start":612,"line_end":612,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123017,"byte_end":123020,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ See [`sort_unstable_by`](Self::sort_unstable_by) for details.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123025,"byte_end":123090,"line_start":614,"line_end":614,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123361,"byte_end":123377,"line_start":625,"line_end":625,"column_start":12,"column_end":28},"name":"sort_unstable_by","qualname":"<IndexSet<T, S>>::sort_unstable_by","value":"fn sort_unstable_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set's values in place using the comparison funtion `cmp`.","sig":null,"attributes":[{"value":"/ Sort the set's values in place using the comparison funtion `cmp`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123208,"byte_end":123278,"line_start":622,"line_end":622,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123283,"byte_end":123286,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time. The sort is unstable.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123291,"byte_end":123349,"line_start":624,"line_end":624,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123644,"byte_end":123662,"line_start":634,"line_end":634,"column_start":12,"column_end":30},"name":"sorted_unstable_by","qualname":"<IndexSet<T, S>>::sorted_unstable_by","value":"fn sorted_unstable_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by-value iterator of\n the values with the result.\n","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by-value iterator of","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123532,"byte_end":123596,"line_start":632,"line_end":632,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123601,"byte_end":123632,"line_start":633,"line_end":633,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124074,"byte_end":124081,"line_start":648,"line_end":648,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":123946,"byte_end":124000,"line_start":645,"line_end":645,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124005,"byte_end":124008,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124013,"byte_end":124062,"line_start":647,"line_end":647,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124302,"byte_end":124311,"line_start":659,"line_end":659,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124163,"byte_end":124187,"line_start":654,"line_end":654,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124192,"byte_end":124195,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124200,"byte_end":124247,"line_start":656,"line_end":656,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124252,"byte_end":124255,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124260,"byte_end":124290,"line_start":658,"line_end":658,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124496,"byte_end":124501,"line_start":666,"line_end":666,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124418,"byte_end":124441,"line_start":663,"line_end":663,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124446,"byte_end":124449,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124454,"byte_end":124484,"line_start":665,"line_end":665,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124668,"byte_end":124672,"line_start":673,"line_end":673,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124591,"byte_end":124613,"line_start":670,"line_end":670,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124618,"byte_end":124621,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124626,"byte_end":124656,"line_start":672,"line_end":672,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125129,"byte_end":125146,"line_start":686,"line_end":686,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124761,"byte_end":124790,"line_start":677,"line_end":677,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124795,"byte_end":124798,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124803,"byte_end":124850,"line_start":679,"line_end":679,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124855,"byte_end":124858,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124863,"byte_end":124936,"line_start":681,"line_end":681,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124941,"byte_end":125004,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125009,"byte_end":125064,"line_start":683,"line_end":683,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125069,"byte_end":125072,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125077,"byte_end":125117,"line_start":685,"line_end":685,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125619,"byte_end":125637,"line_start":699,"line_end":699,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125257,"byte_end":125286,"line_start":690,"line_end":690,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125291,"byte_end":125294,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125299,"byte_end":125346,"line_start":692,"line_end":692,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125351,"byte_end":125354,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125359,"byte_end":125426,"line_start":694,"line_end":694,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125431,"byte_end":125492,"line_start":695,"line_end":695,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125497,"byte_end":125554,"line_start":696,"line_end":696,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125559,"byte_end":125562,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125567,"byte_end":125607,"line_start":698,"line_end":698,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126184,"byte_end":126194,"line_start":712,"line_end":712,"column_start":12,"column_end":22},"name":"move_index","qualname":"<IndexSet<T, S>>::move_index","value":"fn move_index(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Moves the position of a value from one index to another\n by shifting all other values in-between.","sig":null,"attributes":[{"value":"/ Moves the position of a value from one index to another","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125749,"byte_end":125808,"line_start":703,"line_end":703,"column_start":5,"column_end":64}},{"value":"/ by shifting all other values in-between.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125813,"byte_end":125857,"line_start":704,"line_end":704,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125862,"byte_end":125865,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ * If `from < to`, the other values will shift down while the targeted value moves up.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125870,"byte_end":125959,"line_start":706,"line_end":706,"column_start":5,"column_end":94}},{"value":"/ * If `from > to`, the other values will shift up while the targeted value moves down.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":125964,"byte_end":126053,"line_start":707,"line_end":707,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126058,"byte_end":126061,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `from` or `to` are out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126066,"byte_end":126119,"line_start":709,"line_end":709,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126124,"byte_end":126127,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126132,"byte_end":126172,"line_start":711,"line_end":711,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126403,"byte_end":126415,"line_start":719,"line_end":719,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126281,"byte_end":126329,"line_start":716,"line_end":716,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126334,"byte_end":126337,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":126342,"byte_end":126391,"line_start":718,"line_end":718,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127352,"byte_end":127357,"line_start":758,"line_end":758,"column_start":8,"column_end":13},"name":"index","qualname":"<IndexSet<T, S> as core::ops::Index>::index","value":"fn index(&Self, usize) -> &T","parent":{"krate":1,"index":3454},"children":[],"decl_id":{"krate":1,"index":3457},"docs":" Returns a reference to the value at the supplied `index`.","sig":null,"attributes":[{"value":"/ Returns a reference to the value at the supplied `index`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127225,"byte_end":127286,"line_start":755,"line_end":755,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127291,"byte_end":127294,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `index` is out of bounds.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127299,"byte_end":127344,"line_start":757,"line_end":757,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1060},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127798,"byte_end":127806,"line_start":771,"line_end":771,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1062}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127479,"byte_end":127533,"line_start":764,"line_end":764,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127534,"byte_end":127537,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127538,"byte_end":127610,"line_start":766,"line_end":766,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127611,"byte_end":127686,"line_start":767,"line_end":767,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127687,"byte_end":127690,"line_start":768,"line_end":768,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127691,"byte_end":127729,"line_start":769,"line_end":769,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127730,"byte_end":127786,"line_start":770,"line_end":770,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128094,"byte_end":128097,"line_start":786,"line_end":786,"column_start":8,"column_end":11},"name":"len","qualname":"<IntoIter<T> as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128247,"byte_end":128250,"line_start":794,"line_end":794,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IntoIter<T> as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1076},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128685,"byte_end":128689,"line_start":807,"line_end":807,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1079}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128427,"byte_end":128474,"line_start":800,"line_end":800,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128475,"byte_end":128478,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128479,"byte_end":128547,"line_start":802,"line_end":802,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128548,"byte_end":128583,"line_start":803,"line_end":803,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128584,"byte_end":128587,"line_start":804,"line_end":804,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128588,"byte_end":128626,"line_start":805,"line_end":805,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128627,"byte_end":128673,"line_start":806,"line_end":806,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128999,"byte_end":129002,"line_start":822,"line_end":822,"column_start":8,"column_end":11},"name":"len","qualname":"<Iter as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129135,"byte_end":129140,"line_start":830,"line_end":830,"column_start":8,"column_end":13},"name":"clone","qualname":"<Iter as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129285,"byte_end":129288,"line_start":838,"line_end":838,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Iter as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129673,"byte_end":129678,"line_start":850,"line_end":850,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1100}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129404,"byte_end":129459,"line_start":843,"line_end":843,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129460,"byte_end":129463,"line_start":844,"line_end":844,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129464,"byte_end":129533,"line_start":845,"line_end":845,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129534,"byte_end":129569,"line_start":846,"line_end":846,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129570,"byte_end":129573,"line_start":847,"line_end":847,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129574,"byte_end":129612,"line_start":848,"line_end":848,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129613,"byte_end":129661,"line_start":849,"line_end":849,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129974,"byte_end":129977,"line_start":865,"line_end":865,"column_start":8,"column_end":11},"name":"len","qualname":"<Drain as core::iter::ExactSizeIterator>::len","value":"fn len(&Self) -> usize","parent":{"krate":1,"index":8060},"children":[],"decl_id":{"krate":1,"index":8061},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130129,"byte_end":130132,"line_start":873,"line_end":873,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Drain as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130426,"byte_end":130435,"line_start":883,"line_end":883,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a IndexSet<T, S> as core::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":1,"index":7991},"children":[],"decl_id":{"krate":1,"index":7994},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130596,"byte_end":130605,"line_start":892,"line_end":892,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<IndexSet<T, S> as core::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":1,"index":7991},"children":[],"decl_id":{"krate":1,"index":7994},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130830,"byte_end":130839,"line_start":904,"line_end":904,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<IndexSet<T, S> as core::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item = T>","parent":{"krate":1,"index":7987},"children":[],"decl_id":{"krate":1,"index":7989},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131370,"byte_end":131374,"line_start":926,"line_end":926,"column_start":8,"column_end":12},"name":"from","qualname":"<IndexSet<T, RandomState> as core::convert::From>::from","value":"fn from([T; ]) -> Self","parent":{"krate":1,"index":3056},"children":[],"decl_id":{"krate":1,"index":3058},"docs":" # Examples","sig":null,"attributes":[{"value":"/ # Examples","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131142,"byte_end":131156,"line_start":917,"line_end":917,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131161,"byte_end":131164,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131169,"byte_end":131176,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131181,"byte_end":131208,"line_start":920,"line_end":920,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131213,"byte_end":131216,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ let set1 = IndexSet::from([1, 2, 3, 4]);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131221,"byte_end":131265,"line_start":922,"line_end":922,"column_start":5,"column_end":49}},{"value":"/ let set2: IndexSet<_> = [1, 2, 3, 4].into();","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131270,"byte_end":131318,"line_start":923,"line_end":923,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(set1, set2);","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131323,"byte_end":131350,"line_start":924,"line_end":924,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131355,"byte_end":131362,"line_start":925,"line_end":925,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1142},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131529,"byte_end":131535,"line_start":936,"line_end":936,"column_start":8,"column_end":14},"name":"extend","qualname":"<IndexSet<T, S> as core::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = T>","parent":{"krate":1,"index":8000},"children":[],"decl_id":{"krate":1,"index":8002},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131800,"byte_end":131806,"line_start":947,"line_end":947,"column_start":8,"column_end":14},"name":"extend","qualname":"<IndexSet<T, S> as core::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = &'a T>","parent":{"krate":1,"index":8000},"children":[],"decl_id":{"krate":1,"index":8002},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132054,"byte_end":132061,"line_start":958,"line_end":958,"column_start":8,"column_end":15},"name":"default","qualname":"<IndexSet<T, S> as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3128},"children":[],"decl_id":{"krate":1,"index":3129},"docs":" Return an empty `IndexSet`\n","sig":null,"attributes":[{"value":"/ Return an empty `IndexSet`","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132016,"byte_end":132046,"line_start":957,"line_end":957,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132288,"byte_end":132290,"line_start":971,"line_end":971,"column_start":8,"column_end":10},"name":"eq","qualname":"<IndexSet<T, S1> as core::cmp::PartialEq>::eq","value":"fn eq(&Self, &IndexSet<T, S2>) -> bool","parent":{"krate":1,"index":2802},"children":[],"decl_id":{"krate":1,"index":2804},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132639,"byte_end":132650,"line_start":989,"line_end":989,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132559,"byte_end":132627,"line_start":988,"line_end":988,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133025,"byte_end":133034,"line_start":1001,"line_end":1001,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132943,"byte_end":133013,"line_start":1000,"line_end":1000,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133302,"byte_end":133313,"line_start":1009,"line_end":1009,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133220,"byte_end":133290,"line_start":1008,"line_end":1008,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1175},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133739,"byte_end":133749,"line_start":1024,"line_end":1024,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1179},{"krate":0,"index":1180}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133438,"byte_end":133510,"line_start":1017,"line_end":1017,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133511,"byte_end":133514,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133515,"byte_end":133589,"line_start":1019,"line_end":1019,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133590,"byte_end":133625,"line_start":1020,"line_end":1020,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133626,"byte_end":133629,"line_start":1021,"line_end":1021,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133630,"byte_end":133668,"line_start":1022,"line_end":1022,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133669,"byte_end":133727,"line_start":1023,"line_end":1023,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133945,"byte_end":133949,"line_start":1036,"line_end":1036,"column_start":8,"column_end":12},"name":"next","qualname":"<Difference as core::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8188},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134165,"byte_end":134174,"line_start":1045,"line_end":1045,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Difference as core::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8189},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134365,"byte_end":134374,"line_start":1055,"line_end":1055,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Difference as core::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8036},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134740,"byte_end":134745,"line_start":1073,"line_end":1073,"column_start":8,"column_end":13},"name":"clone","qualname":"<Difference as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134973,"byte_end":134976,"line_start":1086,"line_end":1086,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Difference as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1203},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135401,"byte_end":135413,"line_start":1098,"line_end":1098,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1207},{"krate":0,"index":1208}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135092,"byte_end":135166,"line_start":1091,"line_end":1091,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135167,"byte_end":135170,"line_start":1092,"line_end":1092,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135171,"byte_end":135247,"line_start":1093,"line_end":1093,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135248,"byte_end":135283,"line_start":1094,"line_end":1094,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135284,"byte_end":135287,"line_start":1095,"line_end":1095,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135288,"byte_end":135326,"line_start":1096,"line_end":1096,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135327,"byte_end":135389,"line_start":1097,"line_end":1097,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135611,"byte_end":135615,"line_start":1110,"line_end":1110,"column_start":8,"column_end":12},"name":"next","qualname":"<Intersection as core::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8188},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1215},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135830,"byte_end":135839,"line_start":1119,"line_end":1119,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Intersection as core::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8189},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1219},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136032,"byte_end":136041,"line_start":1129,"line_end":1129,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Intersection as core::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8036},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1226},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136410,"byte_end":136415,"line_start":1147,"line_end":1147,"column_start":8,"column_end":13},"name":"clone","qualname":"<Intersection as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1230},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136647,"byte_end":136650,"line_start":1160,"line_end":1160,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Intersection as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1231},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137107,"byte_end":137126,"line_start":1172,"line_end":1172,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1236}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136766,"byte_end":136848,"line_start":1165,"line_end":1165,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136849,"byte_end":136852,"line_start":1166,"line_end":1166,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136853,"byte_end":136923,"line_start":1167,"line_end":1167,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136924,"byte_end":136973,"line_start":1168,"line_end":1168,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136974,"byte_end":136977,"line_start":1169,"line_end":1169,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136978,"byte_end":137016,"line_start":1170,"line_end":1170,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137017,"byte_end":137095,"line_start":1171,"line_end":1171,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137377,"byte_end":137381,"line_start":1184,"line_end":1184,"column_start":8,"column_end":12},"name":"next","qualname":"<SymmetricDifference as core::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8188},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137456,"byte_end":137465,"line_start":1188,"line_end":1188,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<SymmetricDifference as core::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8189},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137545,"byte_end":137549,"line_start":1192,"line_end":1192,"column_start":8,"column_end":12},"name":"fold","qualname":"<SymmetricDifference as core::iter::Iterator>::fold","value":"fn fold<B, F>(Self, B, F) -> B where F: FnMut(B, Self::Item) -> B","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8290},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137827,"byte_end":137836,"line_start":1206,"line_end":1206,"column_start":8,"column_end":17},"name":"next_back","qualname":"<SymmetricDifference as core::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8036},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137916,"byte_end":137921,"line_start":1210,"line_end":1210,"column_start":8,"column_end":13},"name":"rfold","qualname":"<SymmetricDifference as core::iter::DoubleEndedIterator>::rfold","value":"fn rfold<B, F>(Self, B, F) -> B where F: FnMut(B, Self::Item) -> B","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8043},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1264},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138260,"byte_end":138265,"line_start":1227,"line_end":1227,"column_start":8,"column_end":13},"name":"clone","qualname":"<SymmetricDifference as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138523,"byte_end":138526,"line_start":1240,"line_end":1240,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SymmetricDifference as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138923,"byte_end":138928,"line_start":1252,"line_end":1252,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1274}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138642,"byte_end":138709,"line_start":1245,"line_end":1245,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138710,"byte_end":138713,"line_start":1246,"line_end":1246,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138714,"byte_end":138783,"line_start":1247,"line_end":1247,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138784,"byte_end":138819,"line_start":1248,"line_end":1248,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138820,"byte_end":138823,"line_start":1249,"line_end":1249,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138824,"byte_end":138862,"line_start":1250,"line_end":1250,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138863,"byte_end":138911,"line_start":1251,"line_end":1251,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139117,"byte_end":139121,"line_start":1263,"line_end":1263,"column_start":8,"column_end":12},"name":"next","qualname":"<Union as core::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8188},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1281},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139196,"byte_end":139205,"line_start":1267,"line_end":1267,"column_start":8,"column_end":17},"name":"size_hint","qualname":"<Union as core::iter::Iterator>::size_hint","value":"fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8189},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139285,"byte_end":139289,"line_start":1271,"line_end":1271,"column_start":8,"column_end":12},"name":"fold","qualname":"<Union as core::iter::Iterator>::fold","value":"fn fold<B, F>(Self, B, F) -> B where F: FnMut(B, Self::Item) -> B","parent":{"krate":1,"index":8186},"children":[],"decl_id":{"krate":1,"index":8290},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139521,"byte_end":139530,"line_start":1284,"line_end":1284,"column_start":8,"column_end":17},"name":"next_back","qualname":"<Union as core::iter::DoubleEndedIterator>::next_back","value":"fn next_back(&mut Self) -> Option<Self::Item>","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8036},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139610,"byte_end":139615,"line_start":1288,"line_end":1288,"column_start":8,"column_end":13},"name":"rfold","qualname":"<Union as core::iter::DoubleEndedIterator>::rfold","value":"fn rfold<B, F>(Self, B, F) -> B where F: FnMut(B, Self::Item) -> B","parent":{"krate":1,"index":8035},"children":[],"decl_id":{"krate":1,"index":8043},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139884,"byte_end":139889,"line_start":1304,"line_end":1304,"column_start":8,"column_end":13},"name":"clone","qualname":"<Union as core::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":1,"index":2772},"children":[],"decl_id":{"krate":1,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140087,"byte_end":140090,"line_start":1316,"line_end":1316,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Union as core::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":1,"index":9900},"children":[],"decl_id":{"krate":1,"index":9901},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140541,"byte_end":140547,"line_start":1332,"line_end":1332,"column_start":8,"column_end":14},"name":"bitand","qualname":"<&'_ IndexSet<T, S1> as core::ops::BitAnd>::bitand","value":"fn bitand(Self, &IndexSet<T, S2>) -> Self::Output","parent":{"krate":1,"index":3277},"children":[],"decl_id":{"krate":1,"index":3280},"docs":" Returns the set intersection, cloned into a new set.","sig":null,"attributes":[{"value":"/ Returns the set intersection, cloned into a new set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140394,"byte_end":140450,"line_start":1329,"line_end":1329,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140455,"byte_end":140458,"line_start":1330,"line_end":1330,"column_start":5,"column_end":8}},{"value":"/ Values are collected in the same order that they appear in `self`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140463,"byte_end":140533,"line_start":1331,"line_end":1331,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141055,"byte_end":141060,"line_start":1349,"line_end":1349,"column_start":8,"column_end":13},"name":"bitor","qualname":"<&'_ IndexSet<T, S1> as core::ops::BitOr>::bitor","value":"fn bitor(Self, &IndexSet<T, S2>) -> Self::Output","parent":{"krate":1,"index":3282},"children":[],"decl_id":{"krate":1,"index":3285},"docs":" Returns the set union, cloned into a new set.","sig":null,"attributes":[{"value":"/ Returns the set union, cloned into a new set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140845,"byte_end":140894,"line_start":1345,"line_end":1345,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140899,"byte_end":140902,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are collected in their original order, followed by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140907,"byte_end":140980,"line_start":1347,"line_end":1347,"column_start":5,"column_end":78}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140985,"byte_end":141047,"line_start":1348,"line_end":1348,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141563,"byte_end":141569,"line_start":1366,"line_end":1366,"column_start":8,"column_end":14},"name":"bitxor","qualname":"<&'_ IndexSet<T, S1> as core::ops::BitXor>::bitxor","value":"fn bitxor(Self, &IndexSet<T, S2>) -> Self::Output","parent":{"krate":1,"index":3287},"children":[],"decl_id":{"krate":1,"index":3290},"docs":" Returns the set symmetric-difference, cloned into a new set.","sig":null,"attributes":[{"value":"/ Returns the set symmetric-difference, cloned into a new set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141352,"byte_end":141416,"line_start":1362,"line_end":1362,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141421,"byte_end":141424,"line_start":1363,"line_end":1363,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are collected in their original order, followed by","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141429,"byte_end":141502,"line_start":1364,"line_end":1364,"column_start":5,"column_end":78}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141507,"byte_end":141555,"line_start":1365,"line_end":1365,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":142018,"byte_end":142021,"line_start":1382,"line_end":1382,"column_start":8,"column_end":11},"name":"sub","qualname":"<&'_ IndexSet<T, S1> as core::ops::Sub>::sub","value":"fn sub(Self, &IndexSet<T, S2>) -> Self::Output","parent":{"krate":1,"index":3223},"children":[],"decl_id":{"krate":1,"index":3226},"docs":" Returns the set difference, cloned into a new set.","sig":null,"attributes":[{"value":"/ Returns the set difference, cloned into a new set.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141873,"byte_end":141927,"line_start":1379,"line_end":1379,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141932,"byte_end":141935,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ Values are collected in the same order that they appear in `self`.","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":141940,"byte_end":142010,"line_start":1381,"line_end":1381,"column_start":5,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":1356},"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":5230,"byte_end":5235,"line_start":187,"line_end":187,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1355},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13355,"byte_end":13356,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15186,"byte_end":15194,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":97871,"byte_end":97883,"line_start":26,"line_end":26,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":98183,"byte_end":98195,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101244,"byte_end":101257,"line_start":116,"line_end":116,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101372,"byte_end":101385,"line_start":119,"line_end":119,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":75220,"byte_end":75232,"line_start":59,"line_end":59,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":75918,"byte_end":75930,"line_start":82,"line_end":82,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":76249,"byte_end":76261,"line_start":95,"line_end":95,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":76764,"byte_end":76776,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90308,"byte_end":90313,"line_start":499,"line_end":499,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93370,"byte_end":93375,"line_start":589,"line_end":589,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93779,"byte_end":93792,"line_start":601,"line_end":601,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95353,"byte_end":95366,"line_start":644,"line_end":644,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95845,"byte_end":95856,"line_start":663,"line_end":663,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96559,"byte_end":96570,"line_start":687,"line_end":687,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19044,"byte_end":19052,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19450,"byte_end":19458,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19982,"byte_end":19990,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20452,"byte_end":20460,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20886,"byte_end":20894,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25577,"byte_end":25585,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":531},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40245,"byte_end":40253,"line_start":775,"line_end":775,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43761,"byte_end":43765,"line_start":880,"line_end":880,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43880,"byte_end":43884,"line_start":886,"line_end":886,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43986,"byte_end":43990,"line_start":890,"line_end":890,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44094,"byte_end":44098,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44189,"byte_end":44193,"line_start":899,"line_end":899,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44345,"byte_end":44349,"line_start":907,"line_end":907,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44850,"byte_end":44858,"line_start":924,"line_end":924,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44961,"byte_end":44969,"line_start":930,"line_end":930,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45063,"byte_end":45071,"line_start":934,"line_end":934,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45171,"byte_end":45179,"line_start":940,"line_end":940,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45228,"byte_end":45236,"line_start":942,"line_end":942,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45786,"byte_end":45792,"line_start":960,"line_end":960,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45909,"byte_end":45915,"line_start":966,"line_end":966,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1387},{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46019,"byte_end":46025,"line_start":970,"line_end":970,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46129,"byte_end":46135,"line_start":976,"line_end":976,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46226,"byte_end":46232,"line_start":979,"line_end":979,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46386,"byte_end":46392,"line_start":987,"line_end":987,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46910,"byte_end":46919,"line_start":1004,"line_end":1004,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47040,"byte_end":47049,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47153,"byte_end":47162,"line_start":1014,"line_end":1014,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47266,"byte_end":47275,"line_start":1020,"line_end":1020,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47328,"byte_end":47337,"line_start":1022,"line_end":1022,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47911,"byte_end":47921,"line_start":1040,"line_end":1040,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48026,"byte_end":48036,"line_start":1046,"line_end":1046,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1405},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48132,"byte_end":48142,"line_start":1050,"line_end":1050,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":665}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48242,"byte_end":48252,"line_start":1056,"line_end":1056,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48301,"byte_end":48311,"line_start":1058,"line_end":1058,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48856,"byte_end":48860,"line_start":1076,"line_end":1076,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48981,"byte_end":48985,"line_start":1082,"line_end":1082,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49084,"byte_end":49088,"line_start":1086,"line_end":1086,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49192,"byte_end":49196,"line_start":1092,"line_end":1092,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49287,"byte_end":49291,"line_start":1095,"line_end":1095,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49455,"byte_end":49459,"line_start":1103,"line_end":1103,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49970,"byte_end":49977,"line_start":1120,"line_end":1120,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":710},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50105,"byte_end":50112,"line_start":1126,"line_end":1126,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50214,"byte_end":50221,"line_start":1130,"line_end":1130,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50325,"byte_end":50332,"line_start":1136,"line_end":1136,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50397,"byte_end":50404,"line_start":1138,"line_end":1138,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":724}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51005,"byte_end":51013,"line_start":1156,"line_end":1156,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51127,"byte_end":51135,"line_start":1162,"line_end":1162,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51235,"byte_end":51243,"line_start":1166,"line_end":1166,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":739}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51343,"byte_end":51351,"line_start":1172,"line_end":1172,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51412,"byte_end":51420,"line_start":1174,"line_end":1174,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51980,"byte_end":51985,"line_start":1192,"line_end":1192,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52103,"byte_end":52108,"line_start":1198,"line_end":1198,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1441},{"krate":0,"index":1442}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52212,"byte_end":52217,"line_start":1202,"line_end":1202,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52321,"byte_end":52326,"line_start":1208,"line_end":1208,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52391,"byte_end":52396,"line_start":1210,"line_end":1210,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53037,"byte_end":53045,"line_start":1233,"line_end":1233,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53829,"byte_end":53837,"line_start":1265,"line_end":1265,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":799}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55005,"byte_end":55013,"line_start":1310,"line_end":1310,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56090,"byte_end":56098,"line_start":1352,"line_end":1352,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57192,"byte_end":57200,"line_start":1394,"line_end":1394,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57548,"byte_end":57556,"line_start":1405,"line_end":1405,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58172,"byte_end":58180,"line_start":1425,"line_end":1425,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58573,"byte_end":58581,"line_start":1443,"line_end":1443,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59880,"byte_end":59888,"line_start":1476,"line_end":1476,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60284,"byte_end":60292,"line_start":1490,"line_end":1490,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60512,"byte_end":60520,"line_start":1500,"line_end":1500,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60885,"byte_end":60893,"line_start":1517,"line_end":1517,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106568,"byte_end":106576,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":936}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106838,"byte_end":106846,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107357,"byte_end":107365,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107762,"byte_end":107770,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108203,"byte_end":108211,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111354,"byte_end":111362,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1003},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124142,"byte_end":124150,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127182,"byte_end":127190,"line_start":752,"line_end":752,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127872,"byte_end":127880,"line_start":775,"line_end":775,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127977,"byte_end":127985,"line_start":781,"line_end":781,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128073,"byte_end":128081,"line_start":785,"line_end":785,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128175,"byte_end":128183,"line_start":791,"line_end":791,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128226,"byte_end":128234,"line_start":793,"line_end":793,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1075}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128765,"byte_end":128769,"line_start":811,"line_end":811,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1083},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128878,"byte_end":128882,"line_start":817,"line_end":817,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128978,"byte_end":128982,"line_start":821,"line_end":821,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129080,"byte_end":129084,"line_start":827,"line_end":827,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129114,"byte_end":129118,"line_start":829,"line_end":829,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129264,"byte_end":129268,"line_start":837,"line_end":837,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129749,"byte_end":129754,"line_start":854,"line_end":854,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129855,"byte_end":129860,"line_start":860,"line_end":860,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129952,"byte_end":129957,"line_start":864,"line_end":864,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130055,"byte_end":130060,"line_start":870,"line_end":870,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130107,"byte_end":130112,"line_start":872,"line_end":872,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130519,"byte_end":130527,"line_start":888,"line_end":888,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130752,"byte_end":130760,"line_start":899,"line_end":899,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131087,"byte_end":131095,"line_start":913,"line_end":913,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131461,"byte_end":131469,"line_start":931,"line_end":931,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131720,"byte_end":131728,"line_start":942,"line_end":942,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1149}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131973,"byte_end":131981,"line_start":953,"line_end":953,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1154}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132197,"byte_end":132205,"line_start":965,"line_end":965,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132419,"byte_end":132427,"line_start":976,"line_end":976,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132494,"byte_end":132502,"line_start":983,"line_end":983,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1166},{"krate":0,"index":1170},{"krate":0,"index":1173}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133847,"byte_end":133857,"line_start":1029,"line_end":1029,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134291,"byte_end":134301,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134619,"byte_end":134629,"line_start":1065,"line_end":1065,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134710,"byte_end":134720,"line_start":1072,"line_end":1072,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134886,"byte_end":134896,"line_start":1081,"line_end":1081,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135511,"byte_end":135523,"line_start":1103,"line_end":1103,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135956,"byte_end":135968,"line_start":1124,"line_end":1124,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136285,"byte_end":136297,"line_start":1139,"line_end":1139,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136378,"byte_end":136390,"line_start":1146,"line_end":1146,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136558,"byte_end":136570,"line_start":1155,"line_end":1155,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137243,"byte_end":137262,"line_start":1176,"line_end":1176,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137717,"byte_end":137736,"line_start":1200,"line_end":1200,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138084,"byte_end":138103,"line_start":1218,"line_end":1218,"column_start":35,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138216,"byte_end":138235,"line_start":1226,"line_end":1226,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138400,"byte_end":138419,"line_start":1234,"line_end":1234,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139024,"byte_end":139029,"line_start":1256,"line_end":1256,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139452,"byte_end":139457,"line_start":1279,"line_end":1279,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139773,"byte_end":139778,"line_start":1296,"line_end":1296,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139859,"byte_end":139864,"line_start":1303,"line_end":1303,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140005,"byte_end":140010,"line_start":1311,"line_end":1311,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3906,"byte_end":3915,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":4113,"byte_end":4119,"line_start":135,"line_end":135,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1341},{"krate":0,"index":1342}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":4512,"byte_end":4518,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3379,"byte_end":3382,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":82}},{"kind":"Mod","span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3392,"byte_end":3395,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":863}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/equivalent.rs","byte_start":13355,"byte_end":13356,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/mutable_keys.rs","byte_start":15186,"byte_end":15194,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":46}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":97871,"byte_end":97883,"line_start":26,"line_end":26,"column_start":21,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":98183,"byte_end":98195,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101244,"byte_end":101257,"line_start":116,"line_end":116,"column_start":40,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":135},"to":{"krate":1,"index":3162}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core/raw.rs","byte_start":101372,"byte_end":101385,"line_start":119,"line_end":119,"column_start":16,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":75220,"byte_end":75232,"line_start":59,"line_end":59,"column_start":22,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":195},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":75918,"byte_end":75930,"line_start":82,"line_end":82,"column_start":27,"column_end":39},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":195},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":76249,"byte_end":76261,"line_start":95,"line_end":95,"column_start":24,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":195},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":76764,"byte_end":76776,"line_start":122,"line_end":122,"column_start":12,"column_end":24},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":90308,"byte_end":90313,"line_start":499,"line_end":499,"column_start":16,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93370,"byte_end":93375,"line_start":589,"line_end":589,"column_start":51,"column_end":56},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":270},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":93779,"byte_end":93792,"line_start":601,"line_end":601,"column_start":12,"column_end":25},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95353,"byte_end":95366,"line_start":644,"line_end":644,"column_start":51,"column_end":64},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":135},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":95845,"byte_end":95856,"line_start":663,"line_end":663,"column_start":16,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map/core.rs","byte_start":96559,"byte_end":96570,"line_start":687,"line_end":687,"column_start":39,"column_end":50},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":313},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19044,"byte_end":19052,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19450,"byte_end":19458,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":19982,"byte_end":19990,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20452,"byte_end":20460,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":20886,"byte_end":20894,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":25577,"byte_end":25585,"line_start":319,"line_end":319,"column_start":15,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":40245,"byte_end":40253,"line_start":775,"line_end":775,"column_start":15,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43761,"byte_end":43765,"line_start":880,"line_end":880,"column_start":29,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43880,"byte_end":43884,"line_start":886,"line_end":886,"column_start":36,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":43986,"byte_end":43990,"line_start":890,"line_end":890,"column_start":34,"column_end":38},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44094,"byte_end":44098,"line_start":896,"line_end":896,"column_start":30,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44189,"byte_end":44193,"line_start":899,"line_end":899,"column_start":22,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44345,"byte_end":44349,"line_start":907,"line_end":907,"column_start":39,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44850,"byte_end":44858,"line_start":924,"line_end":924,"column_start":25,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":44961,"byte_end":44969,"line_start":930,"line_end":930,"column_start":36,"column_end":44},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45063,"byte_end":45071,"line_start":934,"line_end":934,"column_start":34,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45171,"byte_end":45179,"line_start":940,"line_end":940,"column_start":30,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45228,"byte_end":45236,"line_start":942,"line_end":942,"column_start":39,"column_end":47},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":577},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45786,"byte_end":45792,"line_start":960,"line_end":960,"column_start":29,"column_end":35},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":45909,"byte_end":45915,"line_start":966,"line_end":966,"column_start":36,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46019,"byte_end":46025,"line_start":970,"line_end":970,"column_start":34,"column_end":40},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46129,"byte_end":46135,"line_start":976,"line_end":976,"column_start":30,"column_end":36},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46226,"byte_end":46232,"line_start":979,"line_end":979,"column_start":22,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46386,"byte_end":46392,"line_start":987,"line_end":987,"column_start":39,"column_end":45},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":599},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":46910,"byte_end":46919,"line_start":1004,"line_end":1004,"column_start":29,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47040,"byte_end":47049,"line_start":1010,"line_end":1010,"column_start":36,"column_end":45},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47153,"byte_end":47162,"line_start":1014,"line_end":1014,"column_start":34,"column_end":43},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47266,"byte_end":47275,"line_start":1020,"line_end":1020,"column_start":30,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47328,"byte_end":47337,"line_start":1022,"line_end":1022,"column_start":39,"column_end":48},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":627},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":47911,"byte_end":47921,"line_start":1040,"line_end":1040,"column_start":25,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":651},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48026,"byte_end":48036,"line_start":1046,"line_end":1046,"column_start":36,"column_end":46},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":651},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48132,"byte_end":48142,"line_start":1050,"line_end":1050,"column_start":34,"column_end":44},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":651},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48242,"byte_end":48252,"line_start":1056,"line_end":1056,"column_start":30,"column_end":40},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":651},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48301,"byte_end":48311,"line_start":1058,"line_end":1058,"column_start":39,"column_end":49},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":651},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48856,"byte_end":48860,"line_start":1076,"line_end":1076,"column_start":29,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":48981,"byte_end":48985,"line_start":1082,"line_end":1082,"column_start":36,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49084,"byte_end":49088,"line_start":1086,"line_end":1086,"column_start":34,"column_end":38},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49192,"byte_end":49196,"line_start":1092,"line_end":1092,"column_start":30,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49287,"byte_end":49291,"line_start":1095,"line_end":1095,"column_start":22,"column_end":26},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49455,"byte_end":49459,"line_start":1103,"line_end":1103,"column_start":51,"column_end":55},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":673},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":49970,"byte_end":49977,"line_start":1120,"line_end":1120,"column_start":29,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50105,"byte_end":50112,"line_start":1126,"line_end":1126,"column_start":36,"column_end":43},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50214,"byte_end":50221,"line_start":1130,"line_end":1130,"column_start":34,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50325,"byte_end":50332,"line_start":1136,"line_end":1136,"column_start":30,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":50397,"byte_end":50404,"line_start":1138,"line_end":1138,"column_start":51,"column_end":58},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":701},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51005,"byte_end":51013,"line_start":1156,"line_end":1156,"column_start":25,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51127,"byte_end":51135,"line_start":1162,"line_end":1162,"column_start":36,"column_end":44},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51235,"byte_end":51243,"line_start":1166,"line_end":1166,"column_start":34,"column_end":42},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51343,"byte_end":51351,"line_start":1172,"line_end":1172,"column_start":30,"column_end":38},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51412,"byte_end":51420,"line_start":1174,"line_end":1174,"column_start":51,"column_end":59},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":725},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":51980,"byte_end":51985,"line_start":1192,"line_end":1192,"column_start":25,"column_end":30},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52103,"byte_end":52108,"line_start":1198,"line_end":1198,"column_start":36,"column_end":41},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52212,"byte_end":52217,"line_start":1202,"line_end":1202,"column_start":34,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52321,"byte_end":52326,"line_start":1208,"line_end":1208,"column_start":30,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":52391,"byte_end":52396,"line_start":1210,"line_end":1210,"column_start":51,"column_end":56},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53037,"byte_end":53045,"line_start":1233,"line_end":1233,"column_start":32,"column_end":40},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":7991}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":53829,"byte_end":53837,"line_start":1265,"line_end":1265,"column_start":40,"column_end":48},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3454}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":55005,"byte_end":55013,"line_start":1310,"line_end":1310,"column_start":43,"column_end":51},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3458}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":56090,"byte_end":56098,"line_start":1352,"line_end":1352,"column_start":32,"column_end":40},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3454}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57192,"byte_end":57200,"line_start":1394,"line_end":1394,"column_start":35,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3458}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":57548,"byte_end":57556,"line_start":1405,"line_end":1405,"column_start":40,"column_end":48},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":7987}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58172,"byte_end":58180,"line_start":1425,"line_end":1425,"column_start":50,"column_end":58},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":58573,"byte_end":58581,"line_start":1443,"line_end":1443,"column_start":34,"column_end":42},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":8000}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":59880,"byte_end":59888,"line_start":1476,"line_end":1476,"column_start":46,"column_end":54},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":8000}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60284,"byte_end":60292,"line_start":1490,"line_end":1490,"column_start":27,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60512,"byte_end":60520,"line_start":1500,"line_end":1500,"column_start":60,"column_end":68},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":2802}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/map.rs","byte_start":60885,"byte_end":60893,"line_start":1517,"line_end":1517,"column_start":22,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":410},"to":{"krate":1,"index":2807}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106568,"byte_end":106576,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":106838,"byte_end":106846,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":928},"to":{"krate":0,"index":1355}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107357,"byte_end":107365,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":107762,"byte_end":107770,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":108203,"byte_end":108211,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":111354,"byte_end":111362,"line_start":252,"line_end":252,"column_start":12,"column_end":20},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":124142,"byte_end":124150,"line_start":653,"line_end":653,"column_start":12,"column_end":20},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127182,"byte_end":127190,"line_start":752,"line_end":752,"column_start":29,"column_end":37},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":3454}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127872,"byte_end":127880,"line_start":775,"line_end":775,"column_start":22,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":127977,"byte_end":127985,"line_start":781,"line_end":781,"column_start":33,"column_end":41},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128073,"byte_end":128081,"line_start":785,"line_end":785,"column_start":31,"column_end":39},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128175,"byte_end":128183,"line_start":791,"line_end":791,"column_start":27,"column_end":35},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128226,"byte_end":128234,"line_start":793,"line_end":793,"column_start":36,"column_end":44},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1060},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128765,"byte_end":128769,"line_start":811,"line_end":811,"column_start":26,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128878,"byte_end":128882,"line_start":817,"line_end":817,"column_start":33,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":128978,"byte_end":128982,"line_start":821,"line_end":821,"column_start":31,"column_end":35},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129080,"byte_end":129084,"line_start":827,"line_end":827,"column_start":27,"column_end":31},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129114,"byte_end":129118,"line_start":829,"line_end":829,"column_start":19,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129264,"byte_end":129268,"line_start":837,"line_end":837,"column_start":36,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1076},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129749,"byte_end":129754,"line_start":854,"line_end":854,"column_start":22,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129855,"byte_end":129860,"line_start":860,"line_end":860,"column_start":33,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":129952,"byte_end":129957,"line_start":864,"line_end":864,"column_start":31,"column_end":36},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":8060}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130055,"byte_end":130060,"line_start":870,"line_end":870,"column_start":27,"column_end":32},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130107,"byte_end":130112,"line_start":872,"line_end":872,"column_start":36,"column_end":41},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130519,"byte_end":130527,"line_start":888,"line_end":888,"column_start":29,"column_end":37},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":7991}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":130752,"byte_end":130760,"line_start":899,"line_end":899,"column_start":32,"column_end":40},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":7987}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131087,"byte_end":131095,"line_start":913,"line_end":913,"column_start":42,"column_end":50},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131461,"byte_end":131469,"line_start":931,"line_end":931,"column_start":26,"column_end":34},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":8000}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131720,"byte_end":131728,"line_start":942,"line_end":942,"column_start":34,"column_end":42},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":8000}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":131973,"byte_end":131981,"line_start":953,"line_end":953,"column_start":24,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":3128}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132197,"byte_end":132205,"line_start":965,"line_end":965,"column_start":48,"column_end":56},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":2802}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132419,"byte_end":132427,"line_start":976,"line_end":976,"column_start":19,"column_end":27},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":928},"to":{"krate":1,"index":2807}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":132494,"byte_end":132502,"line_start":983,"line_end":983,"column_start":12,"column_end":20},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":133847,"byte_end":133857,"line_start":1029,"line_end":1029,"column_start":29,"column_end":39},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1175},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134291,"byte_end":134301,"line_start":1050,"line_end":1050,"column_start":36,"column_end":46},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1175},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134619,"byte_end":134629,"line_start":1065,"line_end":1065,"column_start":30,"column_end":40},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1175},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134710,"byte_end":134720,"line_start":1072,"line_end":1072,"column_start":22,"column_end":32},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1175},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":134886,"byte_end":134896,"line_start":1081,"line_end":1081,"column_start":27,"column_end":37},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1175},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135511,"byte_end":135523,"line_start":1103,"line_end":1103,"column_start":29,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1203},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":135956,"byte_end":135968,"line_start":1124,"line_end":1124,"column_start":36,"column_end":48},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1203},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136285,"byte_end":136297,"line_start":1139,"line_end":1139,"column_start":30,"column_end":42},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1203},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136378,"byte_end":136390,"line_start":1146,"line_end":1146,"column_start":22,"column_end":34},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1203},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":136558,"byte_end":136570,"line_start":1155,"line_end":1155,"column_start":27,"column_end":39},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1203},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137243,"byte_end":137262,"line_start":1176,"line_end":1176,"column_start":34,"column_end":53},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1231},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":137717,"byte_end":137736,"line_start":1200,"line_end":1200,"column_start":41,"column_end":60},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1231},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138084,"byte_end":138103,"line_start":1218,"line_end":1218,"column_start":35,"column_end":54},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1231},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138216,"byte_end":138235,"line_start":1226,"line_end":1226,"column_start":27,"column_end":46},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1231},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":138400,"byte_end":138419,"line_start":1234,"line_end":1234,"column_start":32,"column_end":51},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1231},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139024,"byte_end":139029,"line_start":1256,"line_end":1256,"column_start":29,"column_end":34},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":8186}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139452,"byte_end":139457,"line_start":1279,"line_end":1279,"column_start":36,"column_end":41},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":8035}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139773,"byte_end":139778,"line_start":1296,"line_end":1296,"column_start":30,"column_end":35},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":8461}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":139859,"byte_end":139864,"line_start":1303,"line_end":1303,"column_start":22,"column_end":27},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/set.rs","byte_start":140005,"byte_end":140010,"line_start":1311,"line_end":1311,"column_start":27,"column_end":32},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1270},"to":{"krate":1,"index":9900}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":3906,"byte_end":3915,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1470},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":4113,"byte_end":4119,"line_start":135,"line_end":135,"column_start":22,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1482},"to":{"krate":1,"index":2772}},{"span":{"file_name":"/home/dom/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.9.2/src/lib.rs","byte_start":4512,"byte_end":4518,"line_start":155,"line_end":155,"column_start":12,"column_end":18},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1482},"to":{"krate":4294967295,"index":4294967295}}]}